{"version":3,"sources":["img/icons.svg","img/logo.svg","views/Modal/index.tsx","views/Footer/modal-data.tsx","views/Footer/index.tsx","contracts/deployedAddresses.ts","Web3Context/index.tsx","views/UserAddress/index.tsx","views/Header/index.tsx","views/Widget/TabHeader/index.tsx","views/Widget/common/ActionButton/index.tsx","views/Widget/common/Tooltip/index.tsx","views/Widget/common/Input/index.tsx","views/Widget/utils.ts","views/Widget/TabContent/Panes/Swap/SwapPane.tsx","views/Widget/common/ContentBlock/TextQR.tsx","views/Widget/common/ContentBlock/index.tsx","views/Widget/TabContent/Panes/Swap/InvoiceLN2tbtc.tsx","views/Widget/TabContent/Panes/Swap/Invoicetbtc2ln.tsx","views/Widget/TabContent/Panes/Swap/index.tsx","views/Widget/common/Notification/index.tsx","views/Widget/TabContent/Panes/Operate/OperatePane.tsx","views/Widget/TabContent/Panes/Operate/index.tsx","views/Widget/TabContent/index.tsx","views/Widget/index.tsx","views/Body/index.tsx","views/Revert/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","iconsMap","normal","error","pending","success","Modal","props","isOpen","title","buttonText","children","onButtonClick","type","icon","ICONS","role","className","style","display","xlinkHref","onClick","href","rel","modalData","about","content","Footer","React","useState","dialogId","setDialogId","handleNavClick","e","id","currentTarget","getAttribute","data-id","target","ln2tbtcAddress","Web3Context","createContext","web3","connectWallet","userAddress","ln2tbtcContract","tbtcContract","Web3Provider","setWeb3","setUserAddress","useEffect","a","window","ethereum","request","method","accounts","length","Web3","initialize","web3Normalized","useCallback","onError","onSuccess","undefined","enable","then","providers","HttpProvider","eth","Contract","ln2tbtcABI","abi","tbtcABI","Provider","value","UserAddress","useContext","selectedAddress","setSelectedAddress","displayNoMetamaskModal","setDisplayNoMetamaskModal","currentProvider","errType","substring","Header","src","LOGO","width","height","alt","TabHeader","onTabClick","defaultTab","currentTabId","setCurrentTabId","handleTabClick","data-tabs-nav","aria-label","data-tab-id","ActionButton","text","disabled","Hint","forwardRef","ref","onMouseEnter","onMouseLeave","svgIcon","Tooltip","hintButton","onDismiss","active","position","x","y","arrowOffset","tooltipRect","setTooltipRect","myself","useRef","useLayoutEffect","current","xy","el","tooltipWidth","tooltipHeight","rect","getBoundingClientRect","top","pageYOffset","document","documentElement","scrollTop","left","pageXOffset","scrollLeft","screenHeight","innerHeight","body","clientHeight","elPosX","calculateTooltipPosition","getTooltipRect","handleClickOutside","event","contains","addEventListener","removeEventListener","maxWidth","maxHeight","zIndex","animationDuration","transitionDuration","Input","label","actionText","placeholder","hint","onChange","name","onActionTextClick","questionMarkElement","displayTooltip","setDisplayTooltip","step","min","ev","toMaxDecimalsRound","n","amount","Number","replace","factor","nRound","Math","round","isFinite","convertToUint","tokenDecimals","split","int","decimals","padEnd","Error","addDecimalsToUint","padded","padStart","substr","sha256","buffer","createHash","update","digest","SwapPane","handleInputChange","onConnectWalletClick","onSwapClick","isConnected","handleFromNameChange","lnAmount","tbtcAmount","noInputProvided","notEnoughLiquidityError","notANumberError","leftInputDenom","setLeftInputDenom","tbtcInputProps","lnInputProps","toString","contract","methods","balanceOf","call","balance","getMaxTbtcAmount","old","TextQR","QRUrl","setQRUrl","QRCode","toDataURL","url","generateQr","textAlign","ContentBlock","spellCheck","InvoicePane","operator","secret","paymentHash","waitingForPayment","setWaitingForPayment","invoice","setInvoice","fetch","publicUrl","toLowerCase","res","json","decodedInvoice","decode","BN","valueSat","gt","events","LN2TBTCOperatorLockedTBTC","_","returnValues","action","open","preventDefault","claimTBTCPayment","send","from","createSwap","tBTCAmount","operatorURL","operatorAddress","alert","delay","approve","createTBTC2LNSwap","InvoiceTbtc2LN","swapping","setSwapping","invoiceError","console","log","totalProvided","getOperatorListLength","indexArray","Array","i","Promise","all","map","index","operatorList","operators","op","tbtc","ln","calculateLowestSwap","fromAmountRaw","fromName","fromAmount","selectedOps","linearFee","rawConstantFee","constantFee","diffNominator","pow","mul","e8","computed","sub","div","add","removeFees","filter","opBalance","tBTCBalance","lnBalance","sort","b","Swap","isConnectedMetamask","setIsConnectedMetamask","setSecret","generatedSecret","randomBytes","localStorage","setItem","selectedOperator","errModalName","setErrModalName","setFromAmount","setFromName","stage","setStage","setOperators","getOperators","toAmount","toDecimals","err","createLN2TBTCSwap","InvoiceLN2tbtc","Invoicetbtc2ln","Notification","OperatePane","registerOperator","tbtcBalance","nodeAddress","formValues","setFormValues","exists","operatorInfo","allowance","lt","operatorRegister","Operate","errorMsg","form","TabContent","activeTabId","Widget","setActiveTabId","Body","wrapJSX","elem","Revert","operation","setError","timeout","setTimeout","ln2tbtcOperatorLocked","setln2tbtcOperatorLocked","tbtcSwaps","timeoutTimestamp","lnSwaps","startTimestamp","tBTCLockTimestamp","location","currentTime","Date","now","revertTBTC2LNSwap","revertLN2TBTCSwap","getItem","App","urlParams","URLSearchParams","search","get","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6700b67f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icons.00e2257b.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.7da1c67f.svg\";","import React from \"react\";\n\nimport ICONS from \"../../img/icons.svg\";\n\ninterface ModalProps {\n  isOpen: boolean;\n  title: string;\n  buttonText: string;\n  onButtonClick: () => void;\n  type?: \"normal\" | \"error\" | \"pending\" | \"success\";\n}\n\nconst iconsMap: { [key: string]: string } = {\n  normal: \"\",\n  error: \"icon-bored\",\n  pending: \"icon-clock\",\n  success: \"icon-success\",\n};\n\nconst Modal: React.FC<ModalProps> = (props) => {\n  const {\n    isOpen,\n    title,\n    buttonText,\n    children,\n    onButtonClick,\n    type = \"normal\",\n  } = props;\n  const icon = ICONS + \"#\" + iconsMap[type];\n\n  return isOpen ? (\n    <div role=\"presentation\" className=\"blocker current\">\n      <div className=\"modal\" style={{ display: \"inline-block\" }}>\n        <div className=\"modal__content\">\n          <div className=\"modal__title\">{title}</div>\n          <div className={type === \"normal\" ? \"\" : \"modal__row row\"}>\n            {type !== \"normal\" && (\n              <div className=\"modal__icon\">\n                <svg className={`icon ${iconsMap[type]}`}>\n                  <use xlinkHref={icon}></use>\n                </svg>\n              </div>\n            )}\n            <div className=\"modal__text\">{children}</div>\n          </div>\n          <div className=\"modal__button row justify-end\">\n            <button onClick={onButtonClick} className=\"btn\">\n              {buttonText}\n            </button>\n          </div>\n        </div>\n        <a href=\"#close-modal\" rel=\"modal:close\" className=\"close-modal \">\n          Close\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nexport default Modal;\n","import React from \"react\";\n\ninterface modalDataType {\n  title: string;\n  buttonText: string;\n  content: any;\n}\n\nconst modalData: { [key: string]: modalDataType } = {\n  about: {\n    title: \"About\",\n    buttonText: \"Got it!\",\n    content: (\n      <>\n        tbtcswaps is a decentralized service that enables trustless swaps between tBTC and BTC on the lightning network.\n        <br />\n        <br />\n        It is based on a protocol derived from submarine swaps and it's served by a network of liquidity providers that anyone can join.\n        <br />\n        <br />\n        If you'd like to learn more about how everything works check out our{\" \"}\n        <a href=\"https://github.com/corollari/tbtcswaps/blob/master/README.md\">\n          our docs\n        </a>\n        .\n      </>\n    ),\n  },\n  \"contact-us\": {\n    title: \"Contact us\",\n    buttonText: \"Got it!\",\n    content: (\n      <p>\n        Just drop a message on Keep's discord tagging me{\" \"}\n        <strong>@corollari#2127</strong> or <strong>@bakarapara#3452</strong>.\n        Otherwise you can send an email to{\" \"}\n        <a href=\"mailto:hello@tbtcswaps.com\">hello@tbtcswaps.com</a>.\n      </p>\n    ),\n  },\n};\n\nexport default modalData;\n","import React from \"react\";\nimport Modal from \"../Modal\";\nimport modalData from \"./modal-data\";\n\nexport default function Footer() {\n  const [dialogId, setDialogId] = React.useState<string>(\"\");\n\n  const handleNavClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    const id = e.currentTarget.getAttribute(\"data-id\") ?? \"\";\n    setDialogId(id);\n  };\n\n  const handleClose = () => {\n    setDialogId(\"\");\n  };\n\n  return (\n    <>\n      <footer className=\"footer\">\n        <div className=\"container\">\n          <div className=\"footer__row row align-end justify-between\">\n            <div className=\"footer__left\">\n              <div className=\"footer__site\">\n                <span>tbtcswaps.com</span>\n                <br />\n                Swap Engine\n              </div>\n            </div>\n            <nav className=\"footer__right\">\n              <ul className=\"footer__menu menu\">\n                <li className=\"menu__item\">\n                  <a\n                    data-id=\"code\"\n                    rel=\"noopener noreferrer\"\n                    href=\"https://github.com/corollari/tbtcswaps\"\n                    target=\"_blank\"\n                    className=\"menu__link\"\n                  >\n                    Code\n                  </a>\n                </li>\n                <li className=\"menu__item\">\n                  <a\n                    data-id=\"docs\"\n                    rel=\"noopener noreferrer\"\n                    href=\"https://github.com/corollari/tbtcswaps/blob/master/README.md\"\n                    target=\"_blank\"\n                    className=\"menu__link\"\n                  >\n                    Docs\n                  </a>\n                </li>\n                <li className=\"menu__item\">\n                  <button\n                    data-id=\"about\"\n                    onClick={handleNavClick}\n                    className=\"menu__link\"\n                  >\n                    About\n                  </button>\n                </li>\n                <li className=\"menu__item\">\n                  <button\n                    data-id=\"contact-us\"\n                    onClick={handleNavClick}\n                    className=\"menu__link\"\n                  >\n                    Contact us\n                  </button>\n                </li>\n              </ul>\n            </nav>\n          </div>\n        </div>\n      </footer>\n      <Modal\n        title={modalData[dialogId]?.title}\n        isOpen={!!dialogId}\n        buttonText={modalData[dialogId]?.buttonText}\n        onButtonClick={handleClose}\n      >\n        {modalData[dialogId]?.content}\n      </Modal>\n    </>\n  );\n}\n","export const tbtcAddress = \"0x8dAEBADE922dF735c38C80C7eBD708Af50815fAa\";\nexport const ln2tbtcAddress = \"0x047bA332817849e6Ca0A3F9BA75060e99eaFa9Bb\";\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport { Web3Provider as Web3ProviderType, Ln2tbtcContract, ERC20Contract } from \"../ethereum\";\nimport ln2tbtcABI from \"../contracts/LN2tBTC.json\";\nimport type { AbiItem } from \"web3-utils\";\nimport { ln2tbtcAddress, tbtcAddress } from \"../contracts/deployedAddresses\";\nimport tbtcABI from \"../contracts/IERC20.json\";\n\nconst Web3Context = React.createContext<{\n  web3: Web3ProviderType;\n  userAddress: null | string;\n  ln2tbtcContract:Ln2tbtcContract;\n  tbtcContract:ERC20Contract;\n  connectWallet: (\n    onError?: (errType: \"NO_METAMASK\" | \"ALREADY_CONNECTED\") => void,\n    onSuccess?: () => void\n  ) => void;\n}>({\n  web3: null,\n  connectWallet: () => null,\n  userAddress: null,\n  ln2tbtcContract: null as any,\n  tbtcContract: null as any,\n});\n\nconst Web3Provider: React.FC = (props) => {\n  const [web3, setWeb3] = useState<Web3ProviderType>(null);\n  const [userAddress, setUserAddress] = useState<string | null>(null);\n\n  useEffect(() => {\n    const initialize = async () => {\n      const accounts = await window.ethereum?.request({\n        method: \"eth_accounts\",\n      });\n      if (accounts && accounts.length > 0) {\n        setUserAddress(accounts[0])\n        setWeb3(new Web3(window.ethereum as any));\n      }\n    };\n    initialize();\n  }, []);\n\n  const connectWallet = useCallback(\n    (\n      onError?: (errType: \"NO_METAMASK\" | \"ALREADY_CONNECTED\") => void,\n      onSuccess?: () => void\n    ) => {\n      if (web3 !== null) {\n        if (onError) onError(\"ALREADY_CONNECTED\");\n      }\n      if (window.ethereum === undefined) {\n        if (onError) onError(\"NO_METAMASK\");\n        return;\n      }\n      window.ethereum.enable().then(() => {\n        window.ethereum?.request({\n          method: \"eth_accounts\",\n        }).then(accounts => {\n          setUserAddress(accounts[0])\n        })\n        setWeb3(new Web3(window.ethereum as any));\n        if (onSuccess) onSuccess();\n      });\n    },\n    [web3]\n  );\n\n  let web3Normalized: Web3;\n  if (web3 === null) {\n    web3Normalized = new Web3(\n      new Web3.providers.HttpProvider(\n        \"https://mainnet.infura.io/v3/965c5ec028c84ffcb22c799eddba83a4\"\n      )\n    );\n  } else {\n    web3Normalized = web3;\n  }\n  const ln2tbtcContract = new web3Normalized.eth.Contract(\n    ln2tbtcABI.abi as AbiItem[],\n    ln2tbtcAddress\n  ) as Ln2tbtcContract;\n  const tbtcContract: ERC20Contract = new web3Normalized.eth.Contract(\n    tbtcABI.abi as AbiItem[],\n    tbtcAddress\n  );\n\n  return (\n    <Web3Context.Provider\n      value={{\n        tbtcContract,\n        ln2tbtcContract,\n        userAddress,\n        web3,\n        connectWallet,\n      }}\n    >\n      {props.children}\n    </Web3Context.Provider>\n  );\n};\n\nexport { Web3Provider };\n\nexport default Web3Context;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport Web3Context from \"../../Web3Context\";\nimport Modal from '../Modal'\n\nexport default function UserAddress() {\n  const { web3, connectWallet } = useContext(Web3Context);\n  const [selectedAddress, setSelectedAddress] = useState<string>();\n  const [displayNoMetamaskModal, setDisplayNoMetamaskModal] = useState(false);\n\n  useEffect(() => {\n    setSelectedAddress(\n      web3 === null ? undefined : (web3.currentProvider as any).selectedAddress\n    );\n  }, [web3]);\n\n  return (\n    <>\n      <div\n        className={`header__connect connect connect--${selectedAddress ? \"success\" : \"no\"\n          }`}\n        onClick={() => (!selectedAddress ? connectWallet((errType) => {\n          if (errType === 'NO_METAMASK')\n            setDisplayNoMetamaskModal(true)\n        }) : null)}\n      >\n        <div className=\"connect__label\">\n          {selectedAddress ? \"Mainnet:\" : \"Connect Wallet\"}\n        </div>\n        {selectedAddress && (\n          <div className=\"connect__text\">\n            {selectedAddress.substring(0, 6) +\n              \"...\" +\n              selectedAddress.substring(selectedAddress.length - 4)}\n          </div>\n        )}\n        <div className=\"connect__status\">\n          <span></span>\n        </div>\n      </div>\n      <Modal\n        isOpen={displayNoMetamaskModal}\n        type=\"error\"\n        title={\"Wallet not found\"}\n        buttonText={\"Okay\"}\n        onButtonClick={() => setDisplayNoMetamaskModal(false)}\n      >\n        <span>\n          You must have MetaMask installed to use this product, get it{\" \"}\n          <a\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n            href=\"https://metamask.io/\"\n          >\n            here\n              </a>\n              .\n            </span>\n      </Modal>\n    </>\n  );\n}\n","import React from \"react\";\nimport UserAddress from \"../UserAddress\";\nimport LOGO from \"../../img/logo.svg\";\n\nconst Header: React.FC = () => {\n  return (\n    <header className={\"header header--short\"}>\n      <div className={\"container\"}>\n        <div className={`${\"header__row\"} ${\"row\"} ${\"justify-between\"}`}>\n          <div className={\"header__left\"}>\n            <a href=\"/\" className={\"logo\"}>\n              <img\n                className={\"logo__img\"}\n                src={LOGO}\n                width=\"111\"\n                height=\"66\"\n                alt=\"\"\n              />\n            </a>\n          </div>\n          <div className={\"header__right row\"}>\n            <UserAddress />\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useState } from \"react\";\n\ninterface TabHeaderProps {\n  defaultTab: string;\n  onTabClick: (tabId: string) => void;\n}\n\nconst TabHeader: React.FC<TabHeaderProps> = ({ onTabClick, defaultTab }) => {\n  const [currentTabId, setCurrentTabId] = useState(defaultTab);\n\n  const handleTabClick = (e: React.MouseEvent<HTMLLIElement>) => {\n    const id = e.currentTarget.getAttribute(\"data-tab-id\") ?? defaultTab;\n    setCurrentTabId(id);\n    onTabClick(id);\n  };\n\n  return (\n    <ul className=\"tab-nav\" data-tabs-nav=\"\">\n      <li\n        onClick={handleTabClick}\n        aria-label=\"swap\"\n        data-tab-id=\"swap\"\n        className={currentTabId === \"swap\" ? \"is_active\" : \"\"}\n      >\n        <span>Swap</span>\n      </li>\n      <li\n        onClick={handleTabClick}\n        aria-label=\"operate\"\n        data-tab-id=\"operate\"\n        className={currentTabId === \"operate\" ? \"is_active\" : \"\"}\n      >\n        <span>Operate</span>\n      </li>\n    </ul>\n  );\n};\n\nexport default TabHeader;\n","import React from \"react\";\n\ninterface ActionButtonProps {\n  text: string;\n  className?: string;\n  type?: \"primary\" | \"secondary\" | \"loading\";\n  disabled?: boolean;\n  onClick?: () => void;\n}\n\nconst ActionButton: React.FC<ActionButtonProps> = (props) => {\n  const {\n    text,\n    className = \"\",\n    type = \"primary\",\n    disabled = false,\n    onClick = () => null,\n  } = props;\n  return (\n    <div className={className}>\n      <button\n        onClick={onClick}\n        className={`btn btn--full btn--${type}`}\n        disabled={type === \"loading\" || disabled}\n      >\n        <span>{text}</span>\n        {type === \"loading\" && <i className=\"icon icon-loader\"></i>}\n      </button>\n    </div>\n  );\n};\n\nexport default ActionButton;\n","import React, { useRef, useState, useLayoutEffect, useEffect } from \"react\";\nimport ICONS from \"../../../../img/icons.svg\";\n\ninterface HintProps {\n  onClick?: () => void;\n  onMouseEnter?: () => void;\n  onMouseLeave?: () => void;\n  svgIcon?: React.ReactNode;\n}\n\nconst Hint = React.forwardRef<HTMLSpanElement, HintProps>((props, ref) => (\n  <span\n    ref={ref}\n    onClick={props.onClick}\n    onMouseEnter={props.onMouseEnter}\n    onMouseLeave={props.onMouseLeave}\n    className={props.svgIcon ? \"tooltip-general\" : \"tooltip-help\"}\n  >\n    {props.svgIcon || (\n      <svg className=\"icon icon-question\">\n        <use xlinkHref={`${ICONS}#icon-question`}></use>\n      </svg>\n    )}\n  </span>\n));\n\nconst calculateTooltipPosition = (\n  el: HTMLElement,\n  tooltipWidth: number,\n  tooltipHeight: number\n) => {\n  const rect = el.getBoundingClientRect();\n  const top = window.pageYOffset || document.documentElement.scrollTop,\n    left = window.pageXOffset || document.documentElement.scrollLeft;\n\n  let arrowOffset = tooltipWidth / 2;\n\n  const screenHeight =\n    window.innerHeight ||\n    document.body.clientHeight ||\n    document.documentElement.clientHeight;\n\n  let position = \"bottom\";\n  let x = rect.top + top + rect.height + 6;\n  let y = rect.left + left + -tooltipWidth / 2 + rect.width / 2;\n\n  const elPosX = rect.left + rect.width / 2;\n  if (elPosX <= tooltipWidth / 2) {\n    y += tooltipWidth / 2 - elPosX;\n    arrowOffset -= tooltipWidth / 2 - elPosX;\n  }\n\n  const elPosY = rect.top + rect.height / 2;\n  if (screenHeight - elPosY <= tooltipHeight) {\n    position = \"top\";\n    x = x - tooltipHeight - rect.height - 12;\n  }\n\n  return {\n    x,\n    y,\n    position,\n    arrowOffset,\n  };\n};\n\nconst Tooltip: React.FC<{\n  hintButton: React.RefObject<HTMLSpanElement>;\n  onDismiss: () => void;\n  active: boolean;\n}> = ({ hintButton, onDismiss, children, active }) => {\n  const [tooltipRect, setTooltipRect] = useState({\n    position: \"0\",\n    x: -1000,\n    y: -1000,\n    arrowOffset: 0,\n  });\n  const width = 340;\n  const height = 400;\n  let myself = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    const getTooltipRect = (height: number) => {\n      if (hintButton && hintButton.current !== null) {\n        const xy = calculateTooltipPosition(hintButton.current, width, height);\n        setTooltipRect(xy);\n      }\n    };\n\n    if (active && myself !== null && myself.current !== null) {\n      const height = myself.current.clientHeight;\n      getTooltipRect(height);\n    }\n  }, [hintButton, active]);\n\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (myself.current && !myself.current.contains(event.target as Node)) {\n        onDismiss();\n      }\n    }\n\n    // Bind the event listener\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [myself, onDismiss]);\n\n  return (\n    <div\n      ref={myself}\n      className={`tooltipster-base tooltipster-sidetip tooltipster-${tooltipRect.position\n        } fff tooltipster-fade ${active ? \"tooltipster-show\" : \"tooltipster-dying\"\n        }`}\n      style={{\n        position: \"absolute\",\n        maxWidth: `${!active ? \"0\" : width}px`,\n        maxHeight: `${!active ? \"0\" : height}px`,\n        zIndex: 99,\n        top: `${!active ? \"0\" : tooltipRect.x}px`,\n        left: `${!active ? \"0\" : tooltipRect.y}px`,\n        /* height: '122px', */\n        /* width: `${width}px`, */\n        animationDuration: \"350ms\",\n        transitionDuration: \"350ms\",\n      }}\n    >\n      <div className=\"tooltipster-box\">\n        <div className=\"tooltipster-content\">{children}</div>\n      </div>\n      <div\n        className=\"tooltipster-arrow\"\n        style={{ left: `${tooltipRect.arrowOffset}px` }}\n      >\n        <div className=\"tooltipster-arrow-uncropped\">\n          <div className=\"tooltipster-arrow-border\"></div>\n          <div className=\"tooltipster-arrow-background\"></div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Hint, Tooltip };\n","import React, { useRef, useState } from \"react\";\n\nimport { Hint, Tooltip } from \"../Tooltip\";\n\ninterface InputProps {\n  label?: string;\n  actionText?: string;\n  svgIcon?: React.ReactNode;\n  placeholder?: string;\n  value?: string;\n  type?: string;\n  display?: \"block\" | \"inline\";\n  className?: string;\n  hint?: React.ReactNode;\n  error?: string;\n  onChange?: (ev: React.ChangeEvent<HTMLInputElement>) => void;\n  name?: string;\n  step?: number;\n  min?: number;\n  disabled?: boolean,\n  onActionTextClick?: (name: string | undefined) => void\n}\n\nconst Input: React.FC<InputProps> = (props) => {\n  const {\n    label,\n    actionText,\n    svgIcon,\n    placeholder,\n    value,\n    type,\n    className,\n    hint,\n    error,\n    onChange,\n    name,\n    disabled,\n    onActionTextClick\n  } = props;\n  let questionMarkElement = useRef<HTMLSpanElement>(null);\n  const [displayTooltip, setDisplayTooltip] = useState(false);\n\n  return (\n    <>\n      <div className={`exchange__column ${className ?? \"\"}`}>\n        <div className={`form-block ${error ? \"is_error\" : \"\"}`}>\n          {label && (\n            <label className=\"form-block__label\">\n              <span>{label}</span>\n              {hint && (\n                <Hint\n                  ref={questionMarkElement}\n                  onClick={() => {\n                    setDisplayTooltip(true);\n                  }}\n                />\n              )}\n            </label>\n          )}\n          <div className=\"form-block__box\">\n            <input\n              aria-label=\"input\"\n              step={props.step}\n              min={props.min}\n              name={name}\n              onChange={onChange}\n              type={type}\n              disabled={disabled}\n              className=\"form-block__input form-control\"\n              value={value}\n              placeholder={placeholder}\n            />\n            {actionText && <div className=\"form-block__unit action-text\" onClick={(ev) => onActionTextClick ? onActionTextClick(name) : {}}>{actionText}</div>}\n            {svgIcon && <div className=\"form-block__icon\">{svgIcon}</div>}\n          </div>\n          {error && <div className=\"form-block__message\">{error}</div>}\n        </div>\n      </div>\n      {\n        <Tooltip\n          active={displayTooltip}\n          hintButton={questionMarkElement}\n          onDismiss={() => setDisplayTooltip(false)}\n        >\n          {hint}\n        </Tooltip>\n      }\n    </>\n  );\n};\n\nexport default Input;\n","import {createHash} from 'crypto';\n\nexport const toMaxDecimalsFloor = (n: number | string, step: number) => {\n  const amount = typeof n === \"string\" ? Number(n.replace(\",\", \".\")) : n;\n  //let factor = Number('1e' + decimals)\n  let nRound = Math.floor(amount * step) / step;\n  return !isFinite(nRound) ? 0 : nRound;\n};\n\nexport const toMaxDecimalsRound = (n: number | string, step: number) => {\n  const amount = typeof n === \"string\" ? Number(n.replace(\",\", \".\")) : n;\n  if (step <= 0) return amount;\n  //let factor = Number('1e' + decimals)\n  let factor = 1 / step;\n  let nRound = Math.round(amount * factor) / factor;\n  return !isFinite(nRound) ? 0 : nRound;\n};\n\nexport function convertToUint(amount:string, tokenDecimals:number){\n  let [int, decimals] = amount.split('.');\n  decimals = decimals ?? '';\n  int = int.replace(/^0+/, '');\n  decimals = decimals.padEnd(tokenDecimals, '0')\n  if(decimals.length > tokenDecimals){\n    throw new Error(\"Too many decimals were provided\")\n  }\n  return int + decimals;\n}\n\nexport function addDecimalsToUint(amount:string, tokenDecimals:number){\n  const padded = amount.padStart(tokenDecimals + 1, '0');\n  const decimals = padded.substr(-tokenDecimals).replace(/0+$/, '')\n  let int = padded.substr(0, padded.length - tokenDecimals).replace(/^0+/, '')\n  if(int === ''){\n    int='0'\n  }\n  if(decimals===''){\n      return int\n  } else {\n      return `${int}.${decimals}`\n  }  \n}\n\nexport function sha256(buffer:Buffer){\n  return createHash('sha256').update(buffer).digest('hex');\n}","import React, { useState, useEffect, useContext } from \"react\";\nimport ICONS from \"../../../../../img/icons.svg\";\nimport ActionButton from \"../../../common/ActionButton\";\nimport Input from \"../../../common/Input\";\nimport { toMaxDecimalsRound } from \"../../../utils\";\nimport Web3Context from \"../../../../../Web3Context\";\nimport { ERC20Contract } from \"../../../../../ethereum\";\nimport {addDecimalsToUint} from '../../../utils'\n\ninterface SwapPaneProps {\n  handleInputChange?: (name: string, value: string) => void;\n  onConnectWalletClick?: () => void;\n  onSwapClick?: () => void;\n  isConnected?: boolean;\n  handleFromNameChange?: (denom: 'tbtc' | 'ln') => void;\n  notEnoughLiquidityError: boolean;\n  lnAmount:string,\n  tbtcAmount:string,\n  noInputProvided:boolean,\n  notANumberError:boolean\n}\n\nfunction getMaxTbtcAmount(contract:ERC20Contract, userAddress:string){\n  return contract.methods.balanceOf(userAddress).call().then(balance => addDecimalsToUint(balance, 18))\n}\n\nconst SwapPane: React.FC<SwapPaneProps> = (props) => {\n  const {\n    handleInputChange = () => null,\n    onConnectWalletClick = () => null,\n    onSwapClick = () => null,\n    isConnected = false,\n    handleFromNameChange = () => null,\n    lnAmount,\n    tbtcAmount,\n    noInputProvided,\n    notEnoughLiquidityError,\n    notANumberError\n  } = props;\n\n  const [leftInputDenom, setLeftInputDenom] = useState<'tbtc' | 'ln'>(\"tbtc\");\n  useEffect(() => {\n    handleFromNameChange(leftInputDenom);\n  }, [leftInputDenom, handleFromNameChange]);\n\n  const { tbtcContract, userAddress } = useContext(Web3Context);\n\n  const tbtcInputProps = {\n    svgIcon: (\n      <svg className=\"icon icon-man no-fill-transition\">\n        <use xlinkHref={`${ICONS}#icon-man`}></use>\n      </svg>\n    ),\n    placeholder: \"0.0\",\n    value: tbtcAmount,\n    name: \"tbtc\",\n  };\n  const lnInputProps = {\n    svgIcon: (\n      <svg className=\"icon icon-flash no-fill-transition\">\n        <use xlinkHref={`${ICONS}#icon-flash`}></use>\n      </svg>\n    ),\n    placeholder: \"0.0\",\n    value: lnAmount,\n    name: \"ln\",\n  };\n\n  const onChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    //setXAmount is the amount displayed in the input, should be string\n    const name = ev.target.name;\n    const value =\n      ev.target.value === \"\"\n        ? ev.target.value\n        : ev.target.type === \"number\"\n          ? toMaxDecimalsRound(ev.target.value, +ev.target.step).toString()\n          : ev.target.value;\n\n    //this will be sent to parent's component, conversion to number type\n    handleInputChange(name, value);\n  };\n\n  return (\n    <div className=\"tab-pane is_active\">\n      <div className=\"tab-pane__content\">\n        <div className=\"box-operation__content box-operation__content--swap\">\n          <div className=\"box-operation__exchange exchange\">\n            <div className=\"exchange__form\">\n              <div className=\"exchange__row row align-end\">\n                <Input\n                  label=\"From\"\n                  className=\"exchange__column--from\"\n                  onChange={onChange}\n                  error={\n                    notANumberError?\n                    \"Value is not a number\":\n                    undefined\n                  }\n                  {...(leftInputDenom === \"tbtc\"\n                    ? tbtcInputProps\n                    : lnInputProps)}\n                  {...(leftInputDenom===\"tbtc\" && userAddress!==null?{\n                    actionText: \"MAX\",\n                    onActionTextClick: ()=>getMaxTbtcAmount(tbtcContract, userAddress).then(amount=>handleInputChange('tbtc', amount))\n                  }:{})}\n                />\n                <div className=\"exchange__column exchange__column--icon\">\n                  <div className=\"exchange__icon\">\n                    <svg\n                      onClick={() => {\n                        setLeftInputDenom((old) => {\n                          if (old === \"ln\") return \"tbtc\";\n                          else return \"ln\";\n                        });\n                      }}\n                      className=\"icon icon-direction\"\n                    >\n                      <use xlinkHref={`${ICONS}#icon-direction`}></use>\n                    </svg>\n                  </div>\n                </div>\n                <Input\n                  label=\"To\"\n                  className=\"exchange__column--to\"\n                  disabled={true}\n                  {...(leftInputDenom === \"tbtc\"\n                    ? lnInputProps\n                    : tbtcInputProps)}\n                />\n              </div>\n              {isConnected ? (\n                <>\n                  {notEnoughLiquidityError || noInputProvided?\n                    <ActionButton\n                      disabled={true}\n                      text={notEnoughLiquidityError?\"Not enough liquidity\":\"Input an amount\"}\n                      className=\"exchange__button\"\n                    />\n                    :\n                    <>\n                      <ActionButton\n                        onClick={onSwapClick}\n                        text=\"Swap\"\n                        disabled={leftInputDenom === 'ln'}\n                        className=\"exchange__button\"\n                      />\n                      {leftInputDenom === 'ln' &&\n                        <div className=\"note--bottom\">\n                          Note: 1 ETH will be locked during the swap process.\n                        </div>\n                      }\n                    </>\n                  }\n                  {notEnoughLiquidityError &&\n                          <div className=\"note--bottom\">\n                            Project in BETA, liquidity is limited\n                          </div>\n                  }\n                </>\n              ) : (\n                  <ActionButton\n                    onClick={onConnectWalletClick}\n                    text=\"Connect wallet\"\n                    type=\"secondary\"\n                    className=\"exchange__button\"\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SwapPane;\n","import React, { useRef, useState, useEffect } from \"react\";\nimport ICONS from \"../../../../img/icons.svg\";\nimport { Hint, Tooltip } from \"../../common/Tooltip\";\nimport QRCode from \"qrcode\";\n\ninterface TextQRProps {\n  text: string;\n  hint?: React.ReactNode;\n}\n\nconst TextQR: React.FC<TextQRProps> = ({ text, hint }) => {\n  let questionMarkElement = useRef<HTMLElement>(null);\n  const [displayTooltip, setDisplayTooltip] = useState(false);\n\n  const [QRUrl, setQRUrl] = useState<string>();\n\n  useEffect(() => {\n    const generateQr = async () => {\n      const url = await QRCode.toDataURL(text);\n      setQRUrl(url);\n    };\n    generateQr();\n  }, [text]);\n\n  return (\n    <>\n      <div className=\"invoice__block-text\">{text}</div>\n      <div className=\"invoice__block-code\">\n        <Hint\n          ref={questionMarkElement}\n          onClick={() => {\n            setDisplayTooltip(true);\n          }}\n          svgIcon={\n            <svg className=\"icon icon-code\">\n              <use xlinkHref={`${ICONS}#icon-code`}></use>\n            </svg>\n          }\n        />\n      </div>\n      {\n        <Tooltip\n          active={displayTooltip}\n          hintButton={questionMarkElement}\n          onDismiss={() => setDisplayTooltip(false)}\n        >\n          {QRUrl ? (\n            <img\n              className=\"image-code\"\n              src={QRUrl}\n              width=\"185\"\n              height=\"187\"\n              alt=\"\"\n            />\n          ) : (\n            <i\n              style={{ textAlign: \"center\", width: \"155px\", height: \"157px\" }}\n              className=\"image-code icon icon-loader\"\n            ></i>\n          )}\n        </Tooltip>\n      }\n    </>\n  );\n};\n\nexport default TextQR;\n","import React from \"react\";\nimport { default as TextQR } from \"./TextQR\";\n\ninterface ContentBlockProps {\n  label?: string;\n  error?: string\n  onChange?: (text:string)=>void\n}\n\nconst ContentBlock: React.FC<ContentBlockProps> = (props) => {\n  const { label, children, error, onChange } = props;\n  return (\n    <div className=\"invoice__block invoice__block--invoice\">\n      {label && <div className=\"invoice__block-title\">{label}</div>}\n      {!children ? (\n        <>\n          <textarea\n            spellCheck=\"false\"\n            onChange={(event)=>onChange && onChange(event.target.value)}\n            className={`invoice__block-content invoice__block-content--editable row ${error !== undefined ? 'is_error' : ''}`}\n          />\n          {error !== undefined && <span className=\"form-block__message invoice__block-error\" >{error}</span>}\n        </>\n      ) : (\n          <div className=\"invoice__block-content row\">{children}</div>\n        )}\n    </div>\n  );\n};\n\nexport default ContentBlock;\nexport { TextQR };\n","import React, { useState, useEffect, useContext } from \"react\";\nimport ActionButton from \"../../../common/ActionButton\";\nimport ContentBlock, { TextQR } from \"../../../common/ContentBlock\";\nimport { decode } from \"@node-lightning/invoice\";\nimport {ExtendedOperator } from \"../../../../../ethereum\";\nimport Web3Context from \"../../../../../Web3Context\";\nimport {sha256} from '../../../utils'\nimport BN from 'bn.js'\n\ninterface APIResponse {\n  invoice:string\n}\n\nconst InvoicePane: React.FC<{\n  operator:ExtendedOperator,\n  secret:Buffer,\n  lnAmount: string\n}> = ({operator, secret, lnAmount}) => {\n  const paymentHash = sha256(secret)\n\n  const { ln2tbtcContract, userAddress } = useContext(Web3Context);\n  const [waitingForPayment, setWaitingForPayment] = useState(true);\n  const [invoice, setInvoice] = useState<string>(\"Loading...\");\n  useEffect(()=>{\n    fetch(`${operator.publicUrl}/tbtc2ln/invoice/${userAddress?.toLowerCase()}/${paymentHash}`).then(res=>res.json()).then((res:APIResponse)=>{\n      try {\n        const decodedInvoice = decode(res.invoice);\n        if(decodedInvoice.paymentHash.toString('hex') !== paymentHash){\n          throw new Error(\"Payment hashes don't match\")\n        }\n        if(new BN(decodedInvoice.valueSat).gt(new BN(lnAmount))){\n          throw new Error(\"Amount requested in invoice is too high\")\n        }\n        setInvoice(res.invoice)\n      } catch (e) {\n        setInvoice(\"There was a problem with the invoice provided by the Liquidity Provider\")\n      }\n    })\n    ln2tbtcContract.events.LN2TBTCOperatorLockedTBTC({}, (_, event)=>{\n      if(event.returnValues.userAddress.toLowerCase() === userAddress && event.returnValues.paymentHash === ('0x'+paymentHash)){\n        setWaitingForPayment(false)\n      }\n    })\n  }, [])\n\n  return (\n    <div className=\"tab-pane is_active\">\n      <div className=\"tab-pane__content\">\n        <div className=\"box-operation__content\">\n          <div className=\"box-operation__invoice invoice\">\n            <form action=\"#\" className=\"invoice__form\">\n              <div className=\"invoice__title\">\n                Pay Lightning Network invoice\n              </div>\n              <ContentBlock label=\"Invoice\">\n                <TextQR text={invoice} />\n              </ContentBlock>\n              <div className=\"invoice__note\">\n                Note: Funds will be locked for a few days if this transaction gets\n                reverted\n              </div>\n              {waitingForPayment?\n              <>\n              <ActionButton text=\"Waiting for Payment\" type=\"loading\" />\n              <ActionButton text=\"Revert\" onClick={()=>{\n                window.open(`/?operation=revertLn2tbtc&paymentHash=0x${paymentHash}`)\n              }}/>\n              </>\n              :\n              <ActionButton\n              text=\"Finish swap\"\n              className=\"exchange__button\"\n              onClick={async (event?:React.MouseEvent<HTMLButtonElement, MouseEvent>)=>{\n                event?.preventDefault();\n                await ln2tbtcContract.methods.claimTBTCPayment('0x'+paymentHash, '0x'+secret.toString('hex')).send({\n                  from:userAddress!\n                })\n              }}/>\n              }\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InvoicePane;\n","import React, { useState, useContext } from \"react\";\nimport ActionButton from \"../../../common/ActionButton\";\nimport ContentBlock from \"../../../common/ContentBlock\";\nimport { Ln2tbtcContract, ERC20Contract, ExtendedOperator } from \"../../../../../ethereum\";\nimport { decode } from \"@node-lightning/invoice\";\nimport {\n  ln2tbtcAddress,\n} from \"../../../../../contracts/deployedAddresses\";\nimport Web3Context from \"../../../../../Web3Context\";\n\ninterface APIResponse {\n    \"fee\": number,\n    \"delay\": number\n}\n\nasync function createSwap(\n  invoice: string,\n  tBTCAmount: string,\n  operatorURL:string,\n  operatorAddress: string,\n  userAddress: string,\n  ln2tbtcContract: Ln2tbtcContract,\n  tbtcContract:ERC20Contract\n) {\n  const {paymentHash, valueSat} = decode(invoice);\n  if(valueSat===null){\n    window.alert(\"Invoice must specify an amount to be paid\")\n    throw new Error(\"Invoice must specify an amount to be paid\")\n  }\n  const delay = await fetch(`${operatorURL}/ln2tbtc/lockTime/${invoice}`).then(res=>res.json())\n  .then((res:APIResponse)=>res.delay);\n  if(delay > (5*24*60*60)){\n    throw new Error(\"Delay is too large\")\n  }\n  await tbtcContract.methods.approve(ln2tbtcAddress, tBTCAmount).send({\n    from: userAddress,\n  });\n  await ln2tbtcContract.methods\n    .createTBTC2LNSwap('0x'+paymentHash.toString('hex'), tBTCAmount, operatorAddress, delay.toString(), invoice)\n    .send({\n      from: userAddress,\n    });\n}\n\nconst InvoiceTbtc2LN: React.FC<{\n  operator:ExtendedOperator,\n  tBTCAmount: string,\n}> = ({tBTCAmount, operator}) => {\n  const [invoice, setInvoice] = useState<string>(\"\");\n  const [swapping, setSwapping] = useState<boolean>(false);\n  let invoiceError = false;\n  let decodedInvoice: ReturnType<typeof decode>;\n  if (invoice !== \"\") {\n    try {\n      decodedInvoice = decode(invoice);\n    } catch (e) {\n      invoiceError = true;\n    }\n  }\n  const { ln2tbtcContract, tbtcContract, userAddress } = useContext(Web3Context);\n  console.log('provided', operator.totalProvided)\n\n  return (\n    <div className=\"tab-pane is_active\">\n      <div className=\"tab-pane__content\">\n        <div className=\"box-operation__content\">\n          <div className=\"box-operation__invoice invoice\">\n            <form action=\"#\" className=\"invoice__form\">\n            <div className=\"invoice__title\">\n                Provide Lightning Network invoice\n              </div>\n              <div>\n                The lightning invoice created should request a payment of {operator.totalProvided.toString()} sats\n              </div>\n              <ContentBlock\n              label=\"Invoice\"\n              onChange={setInvoice}\n              error={invoiceError?\"Invoice is invalid\":undefined}\n              />\n              <div className=\"invoice__note\">\n                Note: Funds will be locked for a few days if this transaction gets\n                reverted\n              </div>\n              {swapping ?\n                <>\n                <ActionButton text=\"Waiting for Payment\" type=\"loading\" />\n                <ActionButton text=\"Revert\" onClick={()=>{\n                  window.open(`/?operation=revertTbtc2ln&paymentHash=0x${decodedInvoice.paymentHash.toString('hex')}`)\n                }}/>\n                </>\n                :\n                invoiceError?\n                  <ActionButton text=\"Invoice is incorrect\" type=\"primary\" disabled={true}/>\n                  :\n                  <ActionButton text=\"Swap\" type=\"primary\" onClick={async ()=>{\n                    setSwapping(true)\n                    try{\n                      if(userAddress===null){\n                        window.alert(\"Please refresh the page, metamask has not been properly connected\")\n                        return;\n                      }\n                      await createSwap(invoice, tBTCAmount, operator.publicUrl, operator.operatorAddress, userAddress, ln2tbtcContract, tbtcContract)\n                    } finally{\n                      setSwapping(false);\n                    }\n                  }}/>\n              }\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InvoiceTbtc2LN;\n","import React, { useState, useContext, useEffect } from \"react\";\n\nimport SwapPane from \"./SwapPane\";\nimport InvoiceLN2tbtc from \"./InvoiceLN2tbtc\";\nimport Invoicetbtc2ln from \"./Invoicetbtc2ln\";\nimport {randomBytes} from 'crypto';\n\nimport { Operator, Ln2tbtcContract } from \"../../../../../ethereum\";\nimport Web3Context from \"../../../../../Web3Context\";\nimport {convertToUint, addDecimalsToUint, sha256} from '../../../utils'\nimport BN from 'bn.js'\n\nimport Modal from \"../../../../Modal\";\n\ntype ExtendedOperator = Operator&{operatorAddress:string}\nasync function getOperators(contract:Ln2tbtcContract): Promise<ExtendedOperator[]> {\n  const length = Number(await contract.methods.getOperatorListLength().call());\n  const indexArray = Array.from(Array(length), (_, i) => i);\n  const operators = await Promise.all(\n    indexArray.map((index) =>\n      contract.methods\n        .operatorList(index)\n        .call()\n        .then((operatorAddress) =>\n          contract.methods.operators(operatorAddress).call().then(op=>({\n            ...op,\n            operatorAddress\n          }))\n        )\n    )\n  );\n  return operators;\n}\nconst tokenDecimals = {\n  tbtc: 18,\n  ln: 8\n}\n\nfunction removeFees(amount: BN, linearFee: BN, rawConstantFee: BN, fromName:'tbtc'|'ln') {\n  const diffNominator = (new BN(10).pow(new BN(tokenDecimals['tbtc']-tokenDecimals['ln'])))\n  let constantFee:BN\n  if(fromName==='ln'){\n    constantFee = rawConstantFee\n  } else {\n    constantFee = rawConstantFee.mul(diffNominator)\n  }\n  const e8 = new BN(10).pow(new BN(8))\n  const computed = ((amount.sub(constantFee)).mul(e8)).div(e8.add(linearFee));\n  if(fromName==='ln'){\n    return computed.mul(diffNominator)\n  } else {\n    return computed.div(diffNominator)\n  }\n}\n\nfunction calculateLowestSwap(\n  operators: ExtendedOperator[],\n  fromAmountRaw: string,\n  fromName: 'tbtc'|'ln'\n) {\n  const fromAmount = new BN(convertToUint(fromAmountRaw, tokenDecimals[fromName]))\n  const selectedOps = operators\n    .map((op) => {\n      const totalProvided = removeFees(\n        fromAmount,\n        new BN(op.linearFee),\n        new BN(op.constantFee),\n        fromName\n      );\n      return {\n        ...op,\n        totalProvided,\n      };\n    })\n    .filter((op) => {\n      const opBalance = fromName==='ln' ? op.tBTCBalance : op.lnBalance;\n      return new BN(opBalance).gt(op.totalProvided) && op.totalProvided.gt(new BN(0));\n    })\n    .sort((a, b) => Number(b.totalProvided.sub(a.totalProvided))); // From highest to lowest\n  if (selectedOps.length === 0) {\n    return undefined;\n  } else {\n    return selectedOps[0];\n  }\n}\n\nconst Swap: React.FC = () => {\n  const { web3, connectWallet, ln2tbtcContract, userAddress } = useContext(Web3Context);\n  const [isConnectedMetamask, setIsConnectedMetamask] = useState(web3 !== null);\n  useEffect(() => {\n    setIsConnectedMetamask(web3 !== null);\n  }, [web3]);\n  const [secret, setSecret] = useState<Buffer>();\n  useEffect(() => {\n    const generatedSecret = randomBytes(32);\n    setSecret(generatedSecret)\n    localStorage.setItem(sha256(generatedSecret), generatedSecret.toString('hex'));\n  }, []);\n\n  const [errModalName, setErrModalName] = useState<string>();\n\n  const [fromAmount, setFromAmount] = useState(\"\");\n  const [fromName, setFromName] = useState<'tbtc'|'ln'>('tbtc');\n\n  const [stage, setStage] = useState<\"initial\" | \"invoice\">(\"initial\");\n\n  const [operators, setOperators] = React.useState<ExtendedOperator[] | null>(null);\n  useEffect(() => {\n    getOperators(ln2tbtcContract).then(setOperators);\n  }, [ln2tbtcContract]);\n  let selectedOperator: ReturnType<typeof calculateLowestSwap> | undefined;\n  let notEnoughLiquidityError = false;\n  let notANumberError = false;\n  let toAmount = '';\n  if (fromAmount === '' || fromAmount === '0' || operators === null) {\n    selectedOperator = undefined;\n  } else {\n    try{\n    selectedOperator = calculateLowestSwap(operators, fromAmount, fromName);\n    if (selectedOperator === undefined) {\n      notEnoughLiquidityError = true;\n    } else {\n      const toDecimals = tokenDecimals[fromName==='tbtc'?'ln':'tbtc']\n      toAmount=addDecimalsToUint(selectedOperator.totalProvided.toString(), toDecimals)\n    }\n    } catch(e){\n      notANumberError = true;\n    }\n  }\n\n  return (\n    (stage === \"initial\" && (\n      <>\n        <SwapPane\n          onConnectWalletClick={() => {\n            connectWallet(\n              (err) => {\n                if (err === \"NO_METAMASK\") setErrModalName(\"NO_METAMASK\");\n              },\n              () => setIsConnectedMetamask(true)\n            );\n          }}\n          onSwapClick={async () => {\n            if (!notEnoughLiquidityError && !notANumberError && selectedOperator!==undefined) {\n              if(fromName==='ln'){\n                await ln2tbtcContract.methods.createLN2TBTCSwap('0x'+sha256(secret!), selectedOperator.operatorAddress, selectedOperator.totalProvided.toString()).send({\n                  from:userAddress!,\n                  value:'1'.padEnd(19, '0')\n                })\n              }\n              setStage(\"invoice\");\n            }\n          }}\n          isConnected={isConnectedMetamask}\n          handleInputChange={(_, value) => {\n            setFromAmount(value);\n          }}\n          handleFromNameChange={setFromName}\n          notEnoughLiquidityError={notEnoughLiquidityError}\n          notANumberError={notANumberError}\n          lnAmount={fromName==='ln'?fromAmount:toAmount}\n          tbtcAmount={fromName==='tbtc'?fromAmount:toAmount}\n          noInputProvided={fromAmount===''||fromAmount==='0'}\n        />\n        <Modal\n          isOpen={!!errModalName}\n          type=\"error\"\n          title={\"Wallet not found\"}\n          buttonText={\"Okay\"}\n          onButtonClick={() => setErrModalName(undefined)}\n        >\n          <span>\n            You must have MetaMask installed to use this product, get it{\" \"}\n            <a\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n              href=\"https://metamask.io/\"\n            >\n              here\n            </a>\n            .\n          </span>\n        </Modal>\n      </>\n    )) ||\n    (stage === \"invoice\" && selectedOperator !== undefined && (fromName === 'ln' ? <InvoiceLN2tbtc lnAmount={convertToUint(fromAmount, tokenDecimals['ln'])} secret={secret!} operator={selectedOperator} /> : <Invoicetbtc2ln operator={selectedOperator} tBTCAmount={convertToUint(fromAmount, tokenDecimals['tbtc'])} />)) || <span>Contact us.</span>\n  );\n};\n\nexport default Swap;\n","import React from \"react\";\n\nconst Notification: React.FC<{ className?: string }> = (props) => {\n  const { children, className = \"\" } = props;\n  return (\n    <div className={`notification ${className}`}>\n      <div className=\"notification__text\">{children}</div>\n    </div>\n  );\n};\n\nexport default Notification;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport ICONS from \"../../../../../img/icons.svg\";\nimport ActionButton from \"../../../common/ActionButton\";\nimport Input from \"../../../common/Input\";\nimport Notification from \"../../../common/Notification\";\nimport { toMaxDecimalsRound } from \"../../../utils\";\nimport Web3Context from \"../../../../../Web3Context\";\nimport {\n  Operator\n} from \"../../../../../ethereum\";\n\ninterface OperatePaneProps {\n  handleInputChange?: (form: { [key: string]: string | number }) => void;\n  isConnected: boolean,\n  registerOperator: (op: Operator) => Promise<void>\n}\n\nconst OperatePane: React.FC<OperatePaneProps> = (props) => {\n  const { handleInputChange = () => null, isConnected, registerOperator } = props;\n\n  const { connectWallet } = useContext(Web3Context);\n\n  const [formValues, setFormValues] = useState({\n    lnBalance: \"\",\n    tbtcBalance: \"\",\n    linearFee: \"\",\n    constantFee: \"\",\n    nodeAddress: \"\",\n  });\n\n  const onChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    //setXAmount is the amount displayed in the input, should be string\n    const name = ev.target.name;\n    let value = ev.target.value;\n    if (ev.target.type === \"number\")\n      value =\n        ev.target.value === \"\"\n          ? ev.target.value\n          : toMaxDecimalsRound(ev.target.value, +ev.target.step).toString();\n\n    setFormValues((old) => {\n      return {\n        ...old,\n        [name]: value,\n      };\n    });\n  };\n\n  useEffect(() => {\n    handleInputChange(formValues);\n  }, [formValues, handleInputChange]);\n\n  return (\n    <div className=\"tab-pane is_active\">\n      <div className=\"tab-pane__content\">\n        <div className=\"box-operation__content\">\n          <div className=\"box-operation__operate operate\">\n            <div className=\"operate__form\">\n              <Notification>\n                <span>Add liquidity and earn fees on user swaps. <a href=\"https://github.com/corollari/tbtcswaps\">Learn more</a>.</span>\n              </Notification>\n              <div className=\"form-group\">\n                <Input\n                  value={formValues[\"lnBalance\"]}\n                  onChange={onChange}\n                  name=\"lnBalance\"\n                  label=\"LN Balance \"\n                  svgIcon={\n                    <svg className=\"icon icon-flash\">\n                      <use xlinkHref={`${ICONS}#icon-flash`}></use>\n                    </svg>\n                  }\n                  placeholder=\"0.0\"\n                  type=\"number\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <Input\n                  value={formValues[\"tbtcBalance\"]}\n                  onChange={onChange}\n                  name=\"tbtcBalance\"\n                  label=\"tBTC Balance \"\n                  svgIcon={\n                    <svg className=\"icon icon-man\">\n                      <use xlinkHref={`${ICONS}#icon-man`}></use>\n                    </svg>\n                  }\n                  placeholder=\"0.0\"\n                  type=\"number\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <Input\n                  value={formValues[\"linearFee\"]}\n                  onChange={onChange}\n                  name=\"linearFee\"\n                  label=\"Linear Fee \"\n                  placeholder=\"0.0\"\n                  type=\"number\"\n                  hint={\n                    <>\n                      <b>Linear Fee</b> is a percentual fee that will\n                      be charged on all swaps and grows with the amount swapped.\n                      <br />\n                      The total fee is calculated as:\n                      <br />\n                      totalFee = amount*linearFee + constantFee\n                    </>\n                  }\n                />\n              </div>\n              <div className=\"form-group\">\n                <Input\n                  value={formValues[\"constantFee\"]}\n                  onChange={onChange}\n                  name=\"constantFee\"\n                  label=\"Constant Fee \"\n                  placeholder=\"0.0\"\n                  type=\"number\"\n                  hint={\n                    <>\n                      <b>Constant Fee</b> is a fee denominated in satoshis\n                      that will be applied on all swaps by simply incrementing\n                      the cost.\n                      <br />\n                      The total fee is calculated as:\n                      <br />\n                      totalFee = amount*linearFee + constantFee\n                    </>\n                  }\n                />\n              </div>\n              <div className=\"form-group\">\n                <Input\n                  value={formValues[\"nodeAddress\"]}\n                  onChange={onChange}\n                  name=\"nodeAddress\"\n                  label=\"Public URL \"\n                  hint={\n                    <>\n                      <b>Public URL</b> should be the URL of your node\n                      which should have a publicly-exposed HTTP interface.\n                      <br />\n                      SSL should be forced on all connections for security reasons.\n                    </>\n                  }\n                />\n              </div>\n              {isConnected ?\n                <ActionButton\n                  text=\"Register\"\n                  className=\"operate__button\"\n                  onClick={() => {\n                    registerOperator({\n                      tBTCBalance: formValues.tbtcBalance,\n                      lnBalance: formValues.lnBalance,\n                      linearFee: formValues.linearFee,\n                      constantFee: formValues.constantFee,\n                      publicUrl: formValues.nodeAddress,\n                      exists:true\n                    })\n                  }}\n                />\n                :\n                <ActionButton text=\"Connect wallet\" className=\"operate__button\" type=\"secondary\" onClick={connectWallet} />\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OperatePane;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport OperatePane from \"./OperatePane\";\nimport Web3Context from \"../../../../../Web3Context\";\nimport {\n  ln2tbtcAddress,\n} from \"../../../../../contracts/deployedAddresses\";\nimport {\n  Operator,\n  Ln2tbtcContract,\n  ERC20Contract,\n} from \"../../../../../ethereum\";\nimport {convertToUint} from '../../../utils'\nimport BN from 'bn.js'\n\nasync function registerOperator(\n  operatorInfo: Operator,\n  operatorAddress: string,\n  ln2tbtcContract: Ln2tbtcContract,\n  tbtcContract: ERC20Contract\n) {\n  const allowance = await tbtcContract.methods.allowance(operatorAddress, ln2tbtcAddress).call()\n  const tBTCBalance = convertToUint(operatorInfo.tBTCBalance, 18)\n  if (Number(operatorInfo.tBTCBalance) !== 0 && new BN(allowance).lt(new BN(tBTCBalance))) {\n    await tbtcContract.methods\n      .approve(ln2tbtcAddress, tBTCBalance)\n      .send({\n        from: operatorAddress,\n      });\n  }\n  console.log(operatorAddress)\n  await ln2tbtcContract.methods\n    .operatorRegister(\n      tBTCBalance,\n      convertToUint(operatorInfo.lnBalance, 8),\n      convertToUint(operatorInfo.linearFee, 8-2), // Transform to %\n      convertToUint(operatorInfo.constantFee, 8),\n      operatorInfo.publicUrl\n    )\n    .send({\n      from: operatorAddress,\n    });\n}\n\nconst Operate: React.FC = () => {\n  const [errorMsg, setErrorMsg] = useState<string>();\n  const [operatorInfo, setOperatorInfo] = React.useState<Operator | null>(null);\n  const { web3, userAddress, ln2tbtcContract, tbtcContract } = useContext(Web3Context);\n\n  /*\n  useEffect(() => {\n    if (operatorInfo === null && ln2tbtcContract !== null && userAddress) {\n      ln2tbtcContract.methods\n        .operators(userAddress)\n        .call()\n        .then(setOperatorInfo)\n        .catch((err) => setErrorMsg(err.message));\n    }\n  }, [userAddress, operatorInfo]);\n  */\n\n  if(!!errorMsg){\n    return <span>{errorMsg}</span>\n  } else {\n    return <OperatePane \n    handleInputChange={(form) => {}}\n    isConnected={web3!==null}\n    registerOperator={\n      (op:Operator)=>registerOperator(op, userAddress!, ln2tbtcContract, tbtcContract)\n    }/>\n  }\n};\n\nexport default Operate;\n","import React from \"react\";\n\nimport { SwapPane, OperatePane } from \"./Panes\";\n\ninterface TabContentProps {\n  activeTabId: string;\n}\n\nconst TabContent: React.FC<TabContentProps> = ({ activeTabId }) => {\n  return (\n    <div className=\"tab-content\">\n      {(activeTabId === \"swap\" && <SwapPane />) ||\n        (activeTabId === \"operate\" && <OperatePane />) || (\n          <div>Contact us.</div>\n        )}\n    </div>\n  );\n};\n\nexport default TabContent;\n","import React, { useState } from \"react\";\nimport TabHeader from \"./TabHeader\";\nimport TabContent from \"./TabContent\";\n\ninterface WidgetProps {}\n\nconst Widget: React.FC<WidgetProps> = () => {\n  const defaultTab = \"swap\";\n  const [activeTabId, setActiveTabId] = useState(defaultTab);\n\n  return (\n    <div className=\"box-operation\">\n      <div className=\"box-operation__tabs tabs\">\n        <TabHeader defaultTab={defaultTab} onTabClick={setActiveTabId} />\n        <TabContent activeTabId={activeTabId} />\n      </div>\n    </div>\n  );\n};\n\nexport default Widget;\n","import React from \"react\";\nimport Widget from \"../Widget\";\n\ninterface BodyProps {}\n\nconst Body: React.FC<BodyProps> = () => {\n  return (\n    <div className=\"wrapper-content\">\n      <div className=\"container\">\n        <div className=\"content\">\n          <div className=\"heading\">\n            <div className=\"heading__title\">\n              <h1>tBTC Swap Engine</h1>\n            </div>\n            <div className=\"heading__text\">\n              Trustless tBTC / Lightning Network swaps\n            </div>\n          </div>\n          <Widget />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Body;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport Web3Context from \"../../Web3Context\";\nimport ActionButton from \"../Widget/common/ActionButton\";\nimport Modal from \"../Modal\";\n\nfunction wrapJSX(elem:React.ReactElement){\n    return <div className=\"wrapper-content\">\n      <div className=\"container\">\n        <div className=\"content\">\n        <div className=\"box-operation\">\n            {elem}\n        </div>\n        </div>\n      </div>\n    </div>\n}\n\nconst Revert: React.FC<{\n    paymentHash:null|string,\n    operation:\"revertLn2tbtc\"|\"revertTbtc2ln\"\n}> = ({\n    paymentHash,\n    operation\n}) => {\n    const [error, setError] = useState<null|string>(null);\n    if(paymentHash===null){\n        setError(\"The quey parameter paymentHash must be set, this URL is incorrect\")\n        throw new Error(\"No paymentHash query param\")\n    }\n    const { web3, connectWallet, ln2tbtcContract, userAddress } = useContext(Web3Context);\n    const [isConnectedMetamask, setIsConnectedMetamask] = useState(web3 !== null);\n    const [timeout, setTimeout] = useState<null|number>(null);\n    const [ln2tbtcOperatorLocked, setln2tbtcOperatorLocked] = useState<number>(0);\n    useEffect(() => {\n        setIsConnectedMetamask(web3 !== null);\n        if(userAddress!==null){\n            if(operation===\"revertTbtc2ln\"){\n                ln2tbtcContract.methods.tbtcSwaps(userAddress, paymentHash).call().then(\n                    ({timeoutTimestamp})=>{\n                        if(timeoutTimestamp === '0'){\n                            setError(\"Swap doesn't exist, can't be reverted (maybe paymentHash param is wrong?)\")\n                        } else {\n                            setTimeout(Number(timeoutTimestamp))\n                        }\n                    })\n            } else {\n                const timeoutPeriod = 60*60; // 1 hour\n                ln2tbtcContract.methods.lnSwaps(userAddress, paymentHash).call().then(\n                    ({startTimestamp, tBTCLockTimestamp})=>{\n                        if(startTimestamp === '0'){\n                            setError(\"Swap doesn't exist, can't be reverted (maybe paymentHash param is wrong?)\")\n                        } else {\n                            setln2tbtcOperatorLocked(Number(tBTCLockTimestamp))\n                            setTimeout(Number(startTimestamp)+timeoutPeriod)\n                        }\n                    })\n            }\n        }\n    }, [web3]);\n    if(error !== null){\n        return wrapJSX(<Modal\n            title=\"Error\"\n            isOpen={true}\n            buttonText={\"Go back to main page\"}\n            onButtonClick={()=>{\n                window.location.replace(\"/\")\n            }}\n          >\n            {error}\n            <br />\n            <br />\n            If you believe this is a mistake please contact me on discord (@corollari#2127)\n          </Modal>)\n    }\n    if(isConnectedMetamask===true && userAddress!==null){\n        const currentTime = Date.now()/1000;\n        if(timeout === null){\n            return wrapJSX(<ActionButton text=\"Getting swap info\" type=\"loading\" />)\n        } else if(currentTime < timeout){\n            setError(`You must wait until '${new Date(timeout*1000)}' to be able to revert your swap. Please come back here after that time.`)\n            return <></>\n        } else if(operation === \"revertTbtc2ln\"){\n            return wrapJSX(<ActionButton\n                text=\"Revert\"\n                onClick={()=>{\n                    ln2tbtcContract.methods.revertTBTC2LNSwap(paymentHash).send({\n                        from:userAddress\n                    })\n                }}\n                />)\n        } else if(operation === \"revertLn2tbtc\"){\n            if(ln2tbtcOperatorLocked===0){\n                return wrapJSX(<ActionButton\n                    text=\"Revert\"\n                    onClick={()=>{\n                        ln2tbtcContract.methods.revertLN2TBTCSwap(paymentHash).send({\n                            from:userAddress\n                        })\n                    }}\n                    />)\n            } else {\n                return wrapJSX(\n                <><div>\n                    The operator has already locked their funds, you must complete the swap<br />\n                    Please make sure that you are on the same device that you used to start the swap process\n                </div>\n                <ActionButton\n                    text=\"Finish swap\"\n                    onClick={()=>{\n                        const secret = localStorage.getItem(paymentHash.substr(2));\n                        if(secret === null){\n                            setError(\"Unable to find the secret on localStorage. Please make sure you are on the same device/browser that you used to start the swap\")\n                        } else {\n                            ln2tbtcContract.methods.claimTBTCPayment(paymentHash, `0x${secret}`).send({\n                                from:userAddress\n                            })\n                        }\n                    }}\n                    />\n                </>)\n            }\n        } else {\n            return wrapJSX(<>Contact us</>)\n        }\n    } else {\n        return wrapJSX(<ActionButton\n        onClick={()=>connectWallet()}\n        text=\"Connect wallet\"\n        type=\"secondary\"\n        className=\"exchange__button\"\n      />)\n    }\n}\nexport default Revert","import React from \"react\";\nimport Footer from \"./views/Footer\";\nimport Header from \"./views/Header\";\nimport Body from \"./views/Body\";\nimport Revert from \"./views/Revert\";\nimport \"./css/App.css\";\nimport { Web3Provider } from \"./Web3Context\";\n\nfunction App() {\n  const urlParams = new URLSearchParams(window.location.search);\n  const operation = urlParams.get('operation');\n  const paymentHash = urlParams.get('paymentHash');\n  if (operation === null) {\n    return (\n      <div className=\"wrapper\">\n        <Web3Provider>\n          <Header />\n          <Body />\n          <Footer />\n        </Web3Provider>\n      </div>\n    );\n  } else if (operation === \"revertLn2tbtc\" || operation === \"revertTbtc2ln\") {\n    return (\n      <div className=\"wrapper\">\n        <Web3Provider>\n          <Revert operation={operation} paymentHash={paymentHash}/>\n        </Web3Provider>\n      </div>\n    );\n  } else {\n    return <span>Operation not valid</span>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}