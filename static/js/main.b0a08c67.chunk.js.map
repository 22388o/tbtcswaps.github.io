{"version":3,"sources":["img/icons.svg","img/logo.svg","views/Modal/index.tsx","views/Footer/modal-data.tsx","views/Footer/index.tsx","Web3Context/index.tsx","views/UserAddress/index.tsx","views/Header/index.tsx","views/Widget/TabHeader/index.tsx","views/Widget/common/ActionButton/index.tsx","views/Widget/common/Tooltip/index.tsx","views/Widget/common/Input/index.tsx","views/Widget/utils.tsx","views/Widget/TabContent/Panes/Swap/SwapPane.tsx","views/Widget/common/ContentBlock/TextQR.tsx","views/Widget/common/ContentBlock/index.tsx","views/Widget/TabContent/Panes/Swap/InvoiceLN2tbtc.tsx","contracts/deployedAddresses.ts","views/Widget/TabContent/Panes/Swap/Invoicetbtc2ln.tsx","views/Widget/TabContent/Panes/Swap/index.tsx","views/Widget/common/Notification/index.tsx","views/Widget/TabContent/Panes/Operate/OperatePane.tsx","views/Widget/TabContent/Panes/Operate/index.tsx","views/Widget/TabContent/index.tsx","views/Widget/index.tsx","views/Body/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","iconsMap","normal","error","pending","success","Modal","props","isOpen","title","buttonText","children","onButtonClick","type","icon","ICONS","role","className","style","display","xlinkHref","onClick","href","rel","modalData","about","content","Footer","React","useState","dialogId","setDialogId","handleNavClick","e","id","currentTarget","getAttribute","data-id","target","Web3Context","createContext","web3","connectWallet","Web3Provider","setWeb3","useEffect","a","window","ethereum","request","method","accounts","length","Web3","initialize","useCallback","onError","onSuccess","undefined","enable","then","Provider","value","UserAddress","useContext","selectedAddress","setSelectedAddress","currentProvider","substring","Header","src","LOGO","width","height","alt","TabHeader","onTabClick","defaultTab","currentTabId","setCurrentTabId","handleTabClick","data-tabs-nav","aria-label","data-tab-id","ActionButton","text","disabled","Hint","forwardRef","ref","onMouseEnter","onMouseLeave","svgIcon","Tooltip","hintButton","onDismiss","active","position","x","y","arrowOffset","tooltipRect","setTooltipRect","myself","useRef","myselfComplexCheck","current","clientHeight","useLayoutEffect","xy","el","tooltipWidth","tooltipHeight","rect","getBoundingClientRect","top","pageYOffset","document","documentElement","scrollTop","left","pageXOffset","scrollLeft","screenHeight","innerHeight","body","elPosX","calculateTooltipPosition","getTooltipRect","handleClickOutside","event","contains","addEventListener","removeEventListener","maxWidth","maxHeight","zIndex","animationDuration","transitionDuration","Input","label","actionText","placeholder","hint","onChange","name","onActionTextClick","questionMarkElement","displayTooltip","setDisplayTooltip","step","min","ev","toMaxDecimalsRound","n","amount","Number","replace","factor","nRound","Math","round","isFinite","SwapPane","handleInputChange","onConnectWalletClick","onSwapClick","isConnected","handleFromNameChange","lnAmount","tbtcAmount","noInputProvided","notEnoughLiquidityError","leftInputDenom","setLeftInputDenom","tbtcInputProps","console","log","lnInputProps","toString","old","TextQR","QRUrl","setQRUrl","QRCode","toDataURL","url","generateQr","textAlign","ContentBlock","spellCheck","InvoicePane","invoice","decode","action","tbtcAddress","ln2tbtcAddress","tBTCAmount","operatorAddress","Error","paymentHash","ln2tbtcContract","eth","Contract","ln2tbtcABI","abi","tbtcContract","tbtcABI","userAddress","methods","approve","send","from","createTBTC2LNSwap","InvoiceTbtc2LN","swapping","createSwap","providers","HttpProvider","contract","getOperatorListLength","call","indexArray","Array","_","i","Promise","all","map","index","operatorList","operators","op","calculateLowestSwap","fromAmountRaw","fromName","fromAmount","selectedOps","linearFee","constantFee","totalProvided","filter","opBalance","tBTCBalance","lnBalance","sort","b","Swap","isConnectedMetamask","setIsConnectedMetamask","selectedOperator","errModalName","setErrModalName","setFromAmount","setFromName","stage","setStage","setOperators","getOperators","toAmount","err","InvoiceLN2tbtc","Invoicetbtc2ln","Notification","OperatePane","registerOperator","tbtcBalance","nodeAddress","formValues","setFormValues","publicUrl","exists","convertToUint","tokenDecimals","split","int","decimals","padEnd","operatorInfo","operatorRegister","Operate","errorMsg","setUserAddress","form","TabContent","activeTabId","Widget","setActiveTabId","Body","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b0a08c67.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icons.00e2257b.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.7da1c67f.svg\";","import React from \"react\";\n\nimport ICONS from \"../../img/icons.svg\";\n\ninterface ModalProps {\n  isOpen: boolean;\n  title: string;\n  buttonText: string;\n  onButtonClick: () => void;\n  type?: \"normal\" | \"error\" | \"pending\" | \"success\";\n}\n\nconst iconsMap: { [key: string]: string } = {\n  normal: \"\",\n  error: \"icon-bored\",\n  pending: \"icon-clock\",\n  success: \"icon-success\",\n};\n\nconst Modal: React.FC<ModalProps> = (props) => {\n  const {\n    isOpen,\n    title,\n    buttonText,\n    children,\n    onButtonClick,\n    type = \"normal\",\n  } = props;\n  const icon = ICONS + \"#\" + iconsMap[type];\n\n  return isOpen ? (\n    <div role=\"presentation\" className=\"jquery-modal blocker current\">\n      <div className=\"modal\" style={{ display: \"inline-block\" }}>\n        <div className=\"modal__content\">\n          <div className=\"modal__title\">{title}</div>\n          <div className={type === \"normal\" ? \"\" : \"modal__row row\"}>\n            {type !== \"normal\" && (\n              <div className=\"modal__icon\">\n                <svg className={`icon ${iconsMap[type]}`}>\n                  <use xlinkHref={icon}></use>\n                </svg>\n              </div>\n            )}\n            <div className=\"modal__text\">{children}</div>\n          </div>\n          <div className=\"modal__button row justify-end\">\n            <button onClick={onButtonClick} className=\"btn\">\n              {buttonText}\n            </button>\n          </div>\n        </div>\n        <a href=\"#close-modal\" rel=\"modal:close\" className=\"close-modal \">\n          Close\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nexport default Modal;\n","import React from \"react\";\n\ninterface modalDataType {\n  title: string;\n  buttonText: string;\n  content: any;\n}\n\nconst modalData: { [key: string]: modalDataType } = {\n  about: {\n    title: \"About\",\n    buttonText: \"Got it!\",\n    content: (\n      <>\n        tbtcswaps is a decentralized service that enables trustless swaps between tBTC and BTC on the lightning network.\n        <br />\n        <br />\n        It is based on a protocol derived from submarine swaps and it's served by a network of liquidity providers that anyone can join.\n        <br />\n        <br />\n        If you'd like to learn more about how everything works check out our{\" \"}\n        <a href=\"https://github.com/corollari/tbtcswaps/blob/master/README.md\">\n          our docs\n        </a>\n        .\n      </>\n    ),\n  },\n  \"contact-us\": {\n    title: \"Contact us\",\n    buttonText: \"Got it!\",\n    content: (\n      <p>\n        Just drop a message on Keep's discord tagging me{\" \"}\n        <strong>@corollari#2127</strong> or send an email to{\" \"}\n        <a href=\"mailto:hello@tbtcswaps.com\">hello@tbtcswaps.com</a>.\n      </p>\n    ),\n  },\n};\n\nexport default modalData;\n","import React from \"react\";\nimport Modal from \"../Modal\";\nimport modalData from \"./modal-data\";\n\nexport default function Footer() {\n  const [dialogId, setDialogId] = React.useState<string>(\"\");\n\n  const handleNavClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    const id = e.currentTarget.getAttribute(\"data-id\") ?? \"\";\n    setDialogId(id);\n  };\n\n  const handleClose = () => {\n    setDialogId(\"\");\n  };\n\n  return (\n    <>\n      <footer className=\"footer\">\n        <div className=\"container\">\n          <div className=\"footer__row row align-end justify-between\">\n            <div className=\"footer__left\">\n              <div className=\"footer__site\">\n                <span>tbtcswaps.com</span>\n                <br />\n                Swap Engine\n              </div>\n            </div>\n            <nav className=\"footer__right\">\n              <ul className=\"footer__menu menu\">\n                <li className=\"menu__item\">\n                  <a\n                    data-id=\"code\"\n                    rel=\"noopener noreferrer\"\n                    href=\"https://github.com/corollari/tbtcswaps\"\n                    target=\"_blank\"\n                    className=\"menu__link\"\n                  >\n                    Code\n                  </a>\n                </li>\n                <li className=\"menu__item\">\n                  <a\n                    data-id=\"docs\"\n                    rel=\"noopener noreferrer\"\n                    href=\"https://github.com/corollari/tbtcswaps/blob/master/README.md\"\n                    target=\"_blank\"\n                    className=\"menu__link\"\n                  >\n                    Docs\n                  </a>\n                </li>\n                <li className=\"menu__item\">\n                  <button\n                    data-id=\"about\"\n                    onClick={handleNavClick}\n                    className=\"menu__link\"\n                  >\n                    About\n                  </button>\n                </li>\n                <li className=\"menu__item\">\n                  <button\n                    data-id=\"contact-us\"\n                    onClick={handleNavClick}\n                    className=\"menu__link\"\n                  >\n                    Contact us\n                  </button>\n                </li>\n              </ul>\n            </nav>\n          </div>\n        </div>\n      </footer>\n      <Modal\n        title={modalData[dialogId]?.title}\n        isOpen={!!dialogId}\n        buttonText={modalData[dialogId]?.buttonText}\n        onButtonClick={handleClose}\n      >\n        {modalData[dialogId]?.content}\n      </Modal>\n    </>\n  );\n}\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport { Web3Provider as Web3ProviderType } from \"../ethereum\";\n\nconst Web3Context = React.createContext<{\n  web3: Web3ProviderType;\n  connectWallet: (\n    onError?: (errType: \"NO_METAMASK\" | \"ALREADY_CONNECTED\") => void,\n    onSuccess?: () => void\n  ) => void;\n}>({\n  web3: null,\n  connectWallet: () => null,\n});\n\nconst Web3Provider: React.FC = (props) => {\n  const [web3, setWeb3] = useState<Web3ProviderType>(null);\n\n  useEffect(() => {\n    const initialize = async () => {\n      const accounts = await window.ethereum?.request({\n        method: \"eth_accounts\",\n      });\n      if (accounts && accounts.length > 0) {\n        setWeb3(new Web3(window.ethereum as any));\n      }\n    };\n    initialize();\n  }, []);\n\n  const connectWallet = useCallback(\n    (\n      onError?: (errType: \"NO_METAMASK\" | \"ALREADY_CONNECTED\") => void,\n      onSuccess?: () => void\n    ) => {\n      if (web3 !== null) {\n        if (onError) onError(\"ALREADY_CONNECTED\");\n      }\n      if (window.ethereum === undefined) {\n        if (onError) onError(\"NO_METAMASK\");\n        return;\n      }\n      window.ethereum.enable().then(() => {\n        setWeb3(new Web3(window.ethereum as any));\n        if (onSuccess) onSuccess();\n      });\n    },\n    [web3]\n  );\n\n  return (\n    <Web3Context.Provider\n      value={{\n        web3,\n        connectWallet,\n      }}\n    >\n      {props.children}\n    </Web3Context.Provider>\n  );\n};\n\nexport { Web3Provider };\n\nexport default Web3Context;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport Web3Context from \"../../Web3Context\";\n\nexport default function UserAddress() {\n  const { web3, connectWallet } = useContext(Web3Context);\n  const [selectedAddress, setSelectedAddress] = useState<string>();\n\n  useEffect(() => {\n    setSelectedAddress(\n      web3 === null ? undefined : (web3.currentProvider as any).selectedAddress\n    );\n  }, [web3]);\n\n  return (\n    <div\n      className={`header__connect connect connect--${\n        selectedAddress ? \"success\" : \"no\"\n      }`}\n      onClick={() => (!selectedAddress ? connectWallet() : null)}\n    >\n      <div className=\"connect__label\">\n        {selectedAddress ? \"Mainnet:\" : \"Connect Wallet\"}\n      </div>\n      {selectedAddress && (\n        <div className=\"connect__text\">\n          {selectedAddress.substring(0, 6) +\n            \"...\" +\n            selectedAddress.substring(selectedAddress.length - 4)}\n        </div>\n      )}\n      <div className=\"connect__status\">\n        <span></span>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport UserAddress from \"../UserAddress\";\nimport LOGO from \"../../img/logo.svg\";\n\nconst Header: React.FC = () => {\n  return (\n    <header className={\"header header--short\"}>\n      <div className={\"container\"}>\n        <div className={`${\"header__row\"} ${\"row\"} ${\"justify-between\"}`}>\n          <div className={\"header__left\"}>\n            <a href=\"/\" className={\"logo\"}>\n              <img\n                className={\"logo__img\"}\n                src={LOGO}\n                width=\"111\"\n                height=\"66\"\n                alt=\"\"\n              />\n            </a>\n          </div>\n          <div className={\"header__right row\"}>\n            <UserAddress />\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useState } from \"react\";\n\ninterface TabHeaderProps {\n  defaultTab: string;\n  onTabClick: (tabId: string) => void;\n}\n\nconst TabHeader: React.FC<TabHeaderProps> = ({ onTabClick, defaultTab }) => {\n  const [currentTabId, setCurrentTabId] = useState(defaultTab);\n\n  const handleTabClick = (e: React.MouseEvent<HTMLLIElement>) => {\n    const id = e.currentTarget.getAttribute(\"data-tab-id\") ?? defaultTab;\n    setCurrentTabId(id);\n    onTabClick(id);\n  };\n\n  return (\n    <ul className=\"tab-nav\" data-tabs-nav=\"\">\n      <li\n        onClick={handleTabClick}\n        aria-label=\"swap\"\n        data-tab-id=\"swap\"\n        className={currentTabId === \"swap\" ? \"is_active\" : \"\"}\n      >\n        <span>Swap</span>\n      </li>\n      <li\n        onClick={handleTabClick}\n        aria-label=\"operate\"\n        data-tab-id=\"operate\"\n        className={currentTabId === \"operate\" ? \"is_active\" : \"\"}\n      >\n        <span>Operate</span>\n      </li>\n    </ul>\n  );\n};\n\nexport default TabHeader;\n","import React from \"react\";\n\ninterface ActionButtonProps {\n  text: string;\n  className?: string;\n  type?: \"primary\" | \"secondary\" | \"loading\";\n  disabled?: boolean;\n  onClick?: () => void;\n}\n\nconst ActionButton: React.FC<ActionButtonProps> = (props) => {\n  const {\n    text,\n    className = \"\",\n    type = \"primary\",\n    disabled = false,\n    onClick = () => null,\n  } = props;\n  return (\n    <div className={className}>\n      <button\n        onClick={onClick}\n        className={`btn btn--full btn--${type}`}\n        disabled={type === \"loading\" || disabled}\n      >\n        <span>{text}</span>\n        {type === \"loading\" && <i className=\"icon icon-loader\"></i>}\n      </button>\n    </div>\n  );\n};\n\nexport default ActionButton;\n","import React, { useRef, useState, useLayoutEffect, useEffect } from \"react\";\nimport ICONS from \"../../../../img/icons.svg\";\n\ninterface HintProps {\n  onClick?: () => void;\n  onMouseEnter?: () => void;\n  onMouseLeave?: () => void;\n  svgIcon?: React.ReactNode;\n}\n\nconst Hint = React.forwardRef<HTMLSpanElement, HintProps>((props, ref) => (\n  <span\n    ref={ref}\n    onClick={props.onClick}\n    onMouseEnter={props.onMouseEnter}\n    onMouseLeave={props.onMouseLeave}\n    className={props.svgIcon ? \"tooltip-general\" : \"tooltip-help\"}\n  >\n    {props.svgIcon || (\n      <svg className=\"icon icon-question\">\n        <use xlinkHref={`${ICONS}#icon-question`}></use>\n      </svg>\n    )}\n  </span>\n));\n\nconst calculateTooltipPosition = (\n  el: HTMLElement,\n  tooltipWidth: number,\n  tooltipHeight: number\n) => {\n  const rect = el.getBoundingClientRect();\n  const top = window.pageYOffset || document.documentElement.scrollTop,\n    left = window.pageXOffset || document.documentElement.scrollLeft;\n\n  let arrowOffset = tooltipWidth / 2;\n\n  const screenHeight =\n    window.innerHeight ||\n    document.body.clientHeight ||\n    document.documentElement.clientHeight;\n\n  let position = \"bottom\";\n  let x = rect.top + top + rect.height + 6;\n  let y = rect.left + left + -tooltipWidth / 2 + rect.width / 2;\n\n  const elPosX = rect.left + rect.width / 2;\n  if (elPosX <= tooltipWidth / 2) {\n    y += tooltipWidth / 2 - elPosX;\n    arrowOffset -= tooltipWidth / 2 - elPosX;\n  }\n\n  const elPosY = rect.top + rect.height / 2;\n  if (screenHeight - elPosY <= tooltipHeight) {\n    position = \"top\";\n    x = x - tooltipHeight - rect.height - 12;\n  }\n\n  return {\n    x,\n    y,\n    position,\n    arrowOffset,\n  };\n};\n\nconst Tooltip: React.FC<{\n  hintButton: React.RefObject<HTMLSpanElement>;\n  onDismiss: () => void;\n  active: boolean;\n}> = ({ hintButton, onDismiss, children, active }) => {\n  const [tooltipRect, setTooltipRect] = useState({\n    position: \"0\",\n    x: -1000,\n    y: -1000,\n    arrowOffset: 0,\n  });\n  const width = 340;\n  const height = 400;\n  let myself = useRef<HTMLDivElement>(null);\n\n  const myselfComplexCheck = myself.current ? myself.current.clientHeight : 0;\n\n  useLayoutEffect(() => {\n    const getTooltipRect = (height: number) => {\n      if (hintButton && hintButton.current !== null) {\n        const xy = calculateTooltipPosition(hintButton.current, width, height);\n        setTooltipRect(xy);\n      }\n    };\n\n    if (myself !== null && myself.current !== null) {\n      const height = myself.current.clientHeight;\n      getTooltipRect(height);\n    }\n  }, [myselfComplexCheck, hintButton]);\n\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (myself.current && !myself.current.contains(event.target as Node)) {\n        onDismiss();\n      }\n    }\n\n    // Bind the event listener\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [myself, onDismiss]);\n\n  return (\n    <div\n      ref={myself}\n      className={`tooltipster-base tooltipster-sidetip tooltipster-${\n        tooltipRect.position\n      } fff tooltipster-fade ${\n        active ? \"tooltipster-show\" : \"tooltipster-dying\"\n      }`}\n      style={{\n        position: \"absolute\",\n        maxWidth: `${!active ? \"0\" : width}px`,\n        maxHeight: `${!active ? \"0\" : height}px`,\n        zIndex: 9999999,\n        top: `${!active ? \"0\" : tooltipRect.x}px`,\n        left: `${!active ? \"0\" : tooltipRect.y}px`,\n        /* height: '122px', */\n        /* width: `${width}px`, */\n        animationDuration: \"350ms\",\n        transitionDuration: \"350ms\",\n      }}\n    >\n      <div className=\"tooltipster-box\">\n        <div className=\"tooltipster-content\">{children}</div>\n      </div>\n      <div\n        className=\"tooltipster-arrow\"\n        style={{ left: `${tooltipRect.arrowOffset}px` }}\n      >\n        <div className=\"tooltipster-arrow-uncropped\">\n          <div className=\"tooltipster-arrow-border\"></div>\n          <div className=\"tooltipster-arrow-background\"></div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Hint, Tooltip };\n","import React, { useRef, useState } from \"react\";\n\nimport { Hint, Tooltip } from \"../Tooltip\";\n\ninterface InputProps {\n  label?: string;\n  actionText?: string;\n  svgIcon?: React.ReactNode;\n  placeholder?: string;\n  value?: string;\n  type?: string;\n  display?: \"block\" | \"inline\";\n  className?: string;\n  hint?: React.ReactNode;\n  error?: string;\n  onChange?: (ev: React.ChangeEvent<HTMLInputElement>) => void;\n  name?: string;\n  step?: number;\n  min?: number;\n  disabled?: boolean,\n  onActionTextClick?: (name: string | undefined) => void\n}\n\nconst Input: React.FC<InputProps> = (props) => {\n  const {\n    label,\n    actionText,\n    svgIcon,\n    placeholder,\n    value,\n    type,\n    className,\n    hint,\n    error,\n    onChange,\n    name,\n    disabled,\n    onActionTextClick\n  } = props;\n  let questionMarkElement = useRef<HTMLSpanElement>(null);\n  const [displayTooltip, setDisplayTooltip] = useState(false);\n\n  return (\n    <>\n      <div className={`exchange__column ${className ?? \"\"}`}>\n        <div className={`form-block ${error ? \"is_error\" : \"\"}`}>\n          {label && (\n            <label className=\"form-block__label\">\n              <span>{label}</span>\n              {hint && (\n                <Hint\n                  ref={questionMarkElement}\n                  onClick={() => {\n                    setDisplayTooltip(true);\n                  }}\n                />\n              )}\n            </label>\n          )}\n          <div className=\"form-block__box\">\n            <input\n              aria-label=\"input\"\n              step={props.step}\n              min={props.min}\n              name={name}\n              onChange={onChange}\n              type={type}\n              disabled={disabled}\n              className=\"form-block__input form-control\"\n              value={value}\n              placeholder={placeholder}\n            />\n            {actionText && <div className=\"form-block__unit action-text\" onClick={(ev) => onActionTextClick ? onActionTextClick(name) : {}}>{actionText}</div>}\n            {svgIcon && <div className=\"form-block__icon\">{svgIcon}</div>}\n          </div>\n          {error && <div className=\"form-block__message\">{error}</div>}\n        </div>\n      </div>\n      {\n        <Tooltip\n          active={displayTooltip}\n          hintButton={questionMarkElement}\n          onDismiss={() => setDisplayTooltip(false)}\n        >\n          {hint}\n        </Tooltip>\n      }\n    </>\n  );\n};\n\nexport default Input;\n","export const toMaxDecimalsFloor = (n: number | string, step: number) => {\n  const amount = typeof n === \"string\" ? Number(n.replace(\",\", \".\")) : n;\n  //let factor = Number('1e' + decimals)\n  let nRound = Math.floor(amount * step) / step;\n  return !isFinite(nRound) ? 0 : nRound;\n};\n\nexport const toMaxDecimalsRound = (n: number | string, step: number) => {\n  const amount = typeof n === \"string\" ? Number(n.replace(\",\", \".\")) : n;\n  if (step <= 0) return amount;\n  //let factor = Number('1e' + decimals)\n  let factor = 1 / step;\n  let nRound = Math.round(amount * factor) / factor;\n  return !isFinite(nRound) ? 0 : nRound;\n};\n","import React, { useState, useEffect } from \"react\";\nimport ICONS from \"../../../../../img/icons.svg\";\nimport ActionButton from \"../../../common/ActionButton\";\nimport Input from \"../../../common/Input\";\nimport { toMaxDecimalsRound } from \"../../../utils\";\n\ninterface SwapPaneProps {\n  handleInputChange?: (name: string, value: string) => void;\n  onConnectWalletClick?: () => void;\n  onSwapClick?: () => void;\n  isConnected?: boolean;\n  handleFromNameChange?: (denom: 'tbtc' | 'ln') => void;\n  notEnoughLiquidityError: boolean;\n  lnAmount:string,\n  tbtcAmount:string,\n  noInputProvided:boolean\n}\n\nconst SwapPane: React.FC<SwapPaneProps> = (props) => {\n  const {\n    handleInputChange = () => null,\n    onConnectWalletClick = () => null,\n    onSwapClick = () => null,\n    isConnected = false,\n    handleFromNameChange = () => null,\n    lnAmount,\n    tbtcAmount,\n    noInputProvided,\n    notEnoughLiquidityError\n  } = props;\n\n  const [leftInputDenom, setLeftInputDenom] = useState<'tbtc' | 'ln'>(\"tbtc\");\n  useEffect(() => {\n    handleFromNameChange(leftInputDenom);\n  }, [leftInputDenom, handleFromNameChange]);\n\n  const tbtcInputProps = {\n    svgIcon: (\n      <svg className=\"icon icon-man no-fill-transition\">\n        <use xlinkHref={`${ICONS}#icon-man`}></use>\n      </svg>\n    ),\n    placeholder: \"0.0\",\n    value: tbtcAmount,\n    name: \"tbtc\",\n    actionText: \"MAX\",\n    onActionTextClick: console.log\n  };\n  const lnInputProps = {\n    svgIcon: (\n      <svg className=\"icon icon-flash no-fill-transition\">\n        <use xlinkHref={`${ICONS}#icon-flash`}></use>\n      </svg>\n    ),\n    placeholder: \"0.0\",\n    value: lnAmount,\n    name: \"ln\",\n  };\n\n  const onChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    //setXAmount is the amount displayed in the input, should be string\n    const name = ev.target.name;\n    const value =\n      ev.target.value === \"\"\n        ? ev.target.value\n        : ev.target.type === \"number\"\n          ? toMaxDecimalsRound(ev.target.value, +ev.target.step).toString()\n          : ev.target.value;\n\n    //this will be sent to parent's component, conversion to number type\n    handleInputChange(name, value);\n  };\n\n  return (\n    <div className=\"tab-pane is_active\">\n      <div className=\"tab-pane__content\">\n        <div className=\"box-operation__content box-operation__content--swap\">\n          <div className=\"box-operation__exchange exchange\">\n            <div className=\"exchange__form\">\n              <div className=\"exchange__row row align-end\">\n                <Input\n                  label=\"From\"\n                  className=\"exchange__column--from\"\n                  onChange={onChange}\n                  {...(leftInputDenom === \"tbtc\"\n                    ? tbtcInputProps\n                    : lnInputProps)}\n                />\n                <div className=\"exchange__column exchange__column--icon\">\n                  <div className=\"exchange__icon\">\n                    <svg\n                      onClick={() => {\n                        setLeftInputDenom((old) => {\n                          if (old === \"ln\") return \"tbtc\";\n                          else return \"ln\";\n                        });\n                      }}\n                      className=\"icon icon-direction\"\n                    >\n                      <use xlinkHref={`${ICONS}#icon-direction`}></use>\n                    </svg>\n                  </div>\n                </div>\n                <Input\n                  label=\"To\"\n                  className=\"exchange__column--to\"\n                  disabled={true}\n                  {...(leftInputDenom === \"tbtc\"\n                    ? lnInputProps\n                    : tbtcInputProps)}\n                />\n              </div>\n              {isConnected ? (\n                <>\n                  {notEnoughLiquidityError || noInputProvided?\n                    <ActionButton\n                      disabled={true}\n                      text={notEnoughLiquidityError?\"Not enough liquidity\":\"Input an amount\"}\n                      className=\"exchange__button\"\n                    />\n                    :\n                    <>\n                      <ActionButton\n                        onClick={onSwapClick}\n                        text=\"Swap\"\n                        className=\"exchange__button\"\n                      />\n                      {leftInputDenom === 'ln' &&\n                        <div className=\"note--bottom\">\n                          Note: 1 ETH will be locked during Swap Process.\n                        </div>\n                      }\n                    </>\n                  }\n                </>\n              ) : (\n                  <ActionButton\n                    onClick={onConnectWalletClick}\n                    text=\"Connect wallet\"\n                    type=\"secondary\"\n                    className=\"exchange__button\"\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SwapPane;\n","import React, { useRef, useState, useEffect } from \"react\";\nimport ICONS from \"../../../../img/icons.svg\";\nimport { Hint, Tooltip } from \"../../common/Tooltip\";\nimport QRCode from \"qrcode\";\n\ninterface TextQRProps {\n  text: string;\n  hint?: React.ReactNode;\n}\n\nconst TextQR: React.FC<TextQRProps> = ({ text, hint }) => {\n  let questionMarkElement = useRef<HTMLElement>(null);\n  const [displayTooltip, setDisplayTooltip] = useState(false);\n\n  const [QRUrl, setQRUrl] = useState<string>();\n\n  useEffect(() => {\n    const generateQr = async () => {\n      const url = await QRCode.toDataURL(text);\n      setQRUrl(url);\n    };\n    generateQr();\n  }, [text]);\n\n  return (\n    <>\n      <div className=\"invoice__block-text\">{text}</div>\n      <div className=\"invoice__block-code\">\n        <Hint\n          ref={questionMarkElement}\n          onClick={() => {\n            setDisplayTooltip(true);\n          }}\n          svgIcon={\n            <svg className=\"icon icon-code\">\n              <use xlinkHref={`${ICONS}#icon-code`}></use>\n            </svg>\n          }\n        />\n      </div>\n      {\n        <Tooltip\n          active={displayTooltip}\n          hintButton={questionMarkElement}\n          onDismiss={() => setDisplayTooltip(false)}\n        >\n          {QRUrl ? (\n            <img\n              className=\"image-code\"\n              src={QRUrl}\n              width=\"185\"\n              height=\"187\"\n              alt=\"\"\n            />\n          ) : (\n            <i\n              style={{ textAlign: \"center\", width: \"155px\", height: \"157px\" }}\n              className=\"image-code icon icon-loader\"\n            ></i>\n          )}\n        </Tooltip>\n      }\n    </>\n  );\n};\n\nexport default TextQR;\n","import React from \"react\";\nimport { default as TextQR } from \"./TextQR\";\n\ninterface ContentBlockProps {\n  label?: string;\n}\n\nconst ContentBlock: React.FC<ContentBlockProps> = (props) => {\n  const { label, children } = props;\n  return (\n    <div className=\"invoice__block invoice__block--invoice\">\n      {label && <div className=\"invoice__block-title\">{label}</div>}\n      {!children ? (\n        <textarea\n          spellCheck=\"false\"\n          className=\"invoice__block-content invoice__block-content--editable row\"\n        />\n      ) : (\n        <div className=\"invoice__block-content row\">{children}</div>\n      )}\n    </div>\n  );\n};\n\nexport default ContentBlock;\nexport { TextQR };\n","import React, { useState } from \"react\";\nimport ActionButton from \"../../../common/ActionButton\";\nimport ContentBlock, { TextQR } from \"../../../common/ContentBlock\";\nimport { decode } from \"@node-lightning/invoice\";\n\nconst InvoicePane: React.FC = () => {\n  const [invoice, setInvoice] = useState<string>(\"\");\n  let error = false;\n  let result: ReturnType<typeof decode>;\n  if (invoice !== \"\") {\n    try {\n      result = decode(invoice);\n    } catch (e) {\n      error = true;\n    }\n  }\n\n  return (\n    <div className=\"tab-pane is_active\">\n      <div className=\"tab-pane__content\">\n        <div className=\"box-operation__content\">\n          <div className=\"box-operation__invoice invoice\">\n            <form action=\"#\" className=\"invoice__form\">\n              <div className=\"invoice__title\">\n                Pay Lightning Network invoice\n              </div>\n              <ContentBlock label=\"Invoice\">\n                <TextQR text=\"lnbc1pwr3fk2pp5zh36fav42ngkxfzywag42y06e03drpcujg38mq5gzkftdhp3phhsdqqcqzysvq8mgc5782mje6x0hgqd70pc83aa52g8pmpnc0j9x4pa3hrz3csp0ezl477f06ee4qmt4plcmmsftypy727w9zn06h9h6cz4n02t9qcp0c74yt\" />\n              </ContentBlock>\n              <ContentBlock label=\"Swap details\">\n                <div className=\"invoice__block-text\">\n                  <div>\n                    <strong>LN Paid:</strong> 0.01 LN\n                  </div>\n                  <div>\n                    <strong>Swap Fee:</strong> 0.0001 LN\n                  </div>\n                  <div>\n                    <strong>You’ll Get:</strong> 0.0099 tBTC\n                  </div>\n                </div>\n              </ContentBlock>\n              <div className=\"invoice__note\">\n                Note: Funds will be locked for 3 days if this transaction gets\n                reverted\n              </div>\n              <ActionButton text=\"Waiting for Payment\" type=\"loading\" />\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InvoicePane;\n","export const tbtcAddress = \"0x8dAEBADE922dF735c38C80C7eBD708Af50815fAa\";\nexport const ln2tbtcAddress = \"0xE35d566fA32A47Ef75aeF9A890CBC70666625147\";\n","import React, { useState, useContext } from \"react\";\nimport ActionButton from \"../../../common/ActionButton\";\nimport ContentBlock from \"../../../common/ContentBlock\";\nimport { Ln2tbtcContract, ERC20Contract, Web3Provider } from \"../../../../../ethereum\";\nimport { decode } from \"@node-lightning/invoice\";\nimport ln2tbtcABI from \"../../../../../contracts/LN2tBTC.json\";\nimport tbtcABI from \"../../../../../contracts/IERC20.json\";\nimport type { AbiItem } from \"web3-utils\";\nimport {\n  tbtcAddress,\n  ln2tbtcAddress,\n} from \"../../../../../contracts/deployedAddresses\";\nimport Web3Context from \"../../../../../Web3Context\";\n\nasync function createSwap(\n  invoice: string,\n  tBTCAmount: string,\n  operatorAddress: string,\n  web3: Web3Provider\n) {\n  if(web3 === null){\n    throw new Error(\"At the second stage wallet should already be connected\")\n  }\n  const {paymentHash} = decode(invoice);\n  const ln2tbtcContract: Ln2tbtcContract = new web3.eth.Contract(\n    ln2tbtcABI.abi as AbiItem[],\n    ln2tbtcAddress\n  );\n  const tbtcContract: ERC20Contract = new web3.eth.Contract(\n    tbtcABI.abi as AbiItem[],\n    tbtcAddress\n  );\n  const userAddress = (web3.currentProvider as any).selectedAddress;\n  await tbtcContract.methods.approve(ln2tbtcAddress, tBTCAmount).send({\n    from: userAddress,\n  });\n  await ln2tbtcContract.methods\n    .createTBTC2LNSwap(paymentHash.toString('hex'), tBTCAmount, operatorAddress, invoice)\n    .send({\n      from: userAddress,\n    });\n}\n\nconst InvoiceTbtc2LN: React.FC<{\n  operatorAddress:string,\n  tBTCAmount: string,\n}> = ({tBTCAmount, operatorAddress}) => {\n  const [invoice, setInvoice] = useState<string>(\"\");\n  const [swapping, setSwapping] = useState<boolean>(false);\n  let error = false;\n  let result: ReturnType<typeof decode>;\n  if (invoice !== \"\") {\n    try {\n      result = decode(invoice);\n    } catch (e) {\n      error = true;\n    }\n  }\n  const { web3 } = useContext(Web3Context);\n\n  return (\n    <div className=\"tab-pane is_active\">\n      <div className=\"tab-pane__content\">\n        <div className=\"box-operation__content\">\n          <div className=\"box-operation__invoice invoice\">\n            <form action=\"#\" className=\"invoice__form\">\n            <div className=\"invoice__title\">\n                Provide Lightning Network invoice\n              </div>\n              <ContentBlock label=\"Invoice\" />\n              {//<ContentBlock label=\"Swap details\" />\n            }\n              <div className=\"invoice__note\">\n                Note: Funds will be locked for 3 days if this transaction gets\n                reverted\n              </div>\n              {swapping ?\n                <ActionButton text=\"Waiting for Payment\" type=\"loading\" />\n                :\n                <ActionButton text=\"Swap\" type=\"primary\" onClick={()=>createSwap(invoice, tBTCAmount, operatorAddress, web3)}/>\n              }\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InvoiceTbtc2LN;\n","import React, { useState, useContext, useEffect } from \"react\";\n\nimport SwapPane from \"./SwapPane\";\nimport InvoiceLN2tbtc from \"./InvoiceLN2tbtc\";\nimport Invoicetbtc2ln from \"./Invoicetbtc2ln\";\n\nimport { Operator, Ln2tbtcContract } from \"../../../../../ethereum\";\nimport Web3 from \"web3\";\nimport ln2tbtcABI from \"../../../../../contracts/LN2tBTC.json\";\nimport type { AbiItem } from \"web3-utils\";\nimport { ln2tbtcAddress } from \"../../../../../contracts/deployedAddresses\";\n\nimport Web3Context from \"../../../../../Web3Context\";\n\nimport Modal from \"../../../../Modal\";\n\ntype ExtendedOperator = Operator&{operatorAddress:string}\nasync function getOperators(): Promise<ExtendedOperator[]> {\n  const web3 = new Web3(\n    new Web3.providers.HttpProvider(\n      \"https://ropsten.infura.io/v3/965c5ec028c84ffcb22c799eddba83a4\"\n    )\n  );\n  const contract = new web3.eth.Contract(\n    ln2tbtcABI.abi as AbiItem[],\n    ln2tbtcAddress\n  ) as Ln2tbtcContract;\n  const length = Number(await contract.methods.getOperatorListLength().call());\n  const indexArray = Array.from(Array(length), (_, i) => i);\n  const operators = await Promise.all(\n    indexArray.map((index) =>\n      contract.methods\n        .operatorList(index)\n        .call()\n        .then((operatorAddress) =>\n          contract.methods.operators(operatorAddress).call().then(op=>({\n            ...op,\n            operatorAddress\n          }))\n        )\n    )\n  );\n  return operators;\n}\n\nfunction removeFees(amount: number, linearFee: number, constantFee: number) {\n  return ((amount * 10 ** 8 - constantFee) * 10 ** 8) / (10 ** 8 + linearFee);\n}\n\nfunction calculateLowestSwap(\n  operators: ExtendedOperator[],\n  fromAmountRaw: string,\n  fromName: 'tbtc'|'ln'\n) {\n  const fromAmount = Number(fromAmountRaw) //TODO: Change\n  console.log(fromAmount);\n  const selectedOps = operators\n    .map((op) => {\n      const totalProvided = removeFees(\n        fromAmount,\n        Number(op.linearFee),\n        Number(op.constantFee)\n      );\n      console.log(totalProvided);\n      return {\n        ...op,\n        totalProvided,\n      };\n    })\n    .filter((op) => {\n      const opBalance = fromName==='ln' ? op.tBTCBalance : op.lnBalance;\n      return Number(opBalance) > op.totalProvided && op.totalProvided > 0;\n    })\n    .sort((a, b) => b.totalProvided - a.totalProvided); // From highest to lowest\n  if (selectedOps.length === 0) {\n    return undefined;\n  } else {\n    return selectedOps[0];\n  }\n}\n\nconst Swap: React.FC = () => {\n  const { web3, connectWallet } = useContext(Web3Context);\n  const [isConnectedMetamask, setIsConnectedMetamask] = useState(web3 !== null);\n  useEffect(() => {\n    setIsConnectedMetamask(web3 !== null);\n  }, [web3]);\n\n  const [errModalName, setErrModalName] = useState<string>();\n\n  const [fromAmount, setFromAmount] = useState(\"\");\n  const [fromName, setFromName] = useState<'tbtc'|'ln'>('tbtc');\n\n  const [stage, setStage] = useState<\"initial\" | \"invoice\">(\"initial\");\n\n  const [operators, setOperators] = React.useState<ExtendedOperator[] | null>(null);\n  useEffect(() => {\n    getOperators().then(setOperators);\n  }, []);\n  let selectedOperator: ReturnType<typeof calculateLowestSwap> | undefined;\n  let notEnoughLiquidityError = false;\n  let toAmount = '';\n  if (fromAmount === '' || fromAmount === '0' || operators === null) {\n    selectedOperator = undefined;\n  } else {\n    selectedOperator = calculateLowestSwap(operators, fromAmount, fromName);\n    if (selectedOperator === undefined) {\n      notEnoughLiquidityError = true;\n    } else {\n      toAmount=selectedOperator.totalProvided.toString()\n    }\n  }\n\n  return (\n    (stage === \"initial\" && (\n      <>\n        <SwapPane\n          onConnectWalletClick={() => {\n            connectWallet(\n              (err) => {\n                if (err === \"NO_METAMASK\") setErrModalName(\"NO_METAMASK\");\n              },\n              () => setIsConnectedMetamask(true)\n            );\n          }}\n          onSwapClick={() => {\n            if (!notEnoughLiquidityError) {\n              setStage(\"invoice\");\n            }\n          }}\n          isConnected={isConnectedMetamask}\n          handleInputChange={(name, value) => {\n            setFromAmount(value);\n          }}\n          handleFromNameChange={setFromName}\n          notEnoughLiquidityError={notEnoughLiquidityError}\n          lnAmount={fromName==='ln'?fromAmount:toAmount}\n          tbtcAmount={fromName==='tbtc'?fromAmount:toAmount}\n          noInputProvided={fromAmount===''||fromAmount==='0'}\n        />\n        <Modal\n          isOpen={!!errModalName}\n          type=\"error\"\n          title={\"Wallet not found\"}\n          buttonText={\"Okay\"}\n          onButtonClick={() => setErrModalName(undefined)}\n        >\n          <span>\n            You must have MetaMask installed to use this product, get it{\" \"}\n            <a\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n              href=\"https://metamask.io/\"\n            >\n              here\n            </a>\n            .\n          </span>\n        </Modal>\n      </>\n    )) ||\n    (stage === \"invoice\" && selectedOperator !== undefined && (fromName === 'ln' ? <InvoiceLN2tbtc /> : <Invoicetbtc2ln operatorAddress={selectedOperator.operatorAddress} tBTCAmount={fromAmount} />)) || <span>Contact us.</span>\n  );\n};\n\nexport default Swap;\n","import React from \"react\";\n\nconst Notification: React.FC<{ className?: string }> = (props) => {\n  const { children, className = \"\" } = props;\n  return (\n    <div className={`notification ${className}`}>\n      <div className=\"notification__text\">{children}</div>\n    </div>\n  );\n};\n\nexport default Notification;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport ICONS from \"../../../../../img/icons.svg\";\nimport ActionButton from \"../../../common/ActionButton\";\nimport Input from \"../../../common/Input\";\nimport Notification from \"../../../common/Notification\";\nimport { toMaxDecimalsRound } from \"../../../utils\";\nimport Web3Context from \"../../../../../Web3Context\";\nimport {\n  Operator\n} from \"../../../../../ethereum\";\n\ninterface OperatePaneProps {\n  handleInputChange?: (form: { [key: string]: string | number }) => void;\n  isConnected: boolean,\n  registerOperator: (op: Operator) => Promise<void>\n}\n\nconst OperatePane: React.FC<OperatePaneProps> = (props) => {\n  const { handleInputChange = () => null, isConnected, registerOperator } = props;\n\n  const { connectWallet } = useContext(Web3Context);\n\n  const [formValues, setFormValues] = useState({\n    lnBalance: \"\",\n    tbtcBalance: \"\",\n    linearFee: \"\",\n    constantFee: \"\",\n    nodeAddress: \"\",\n  });\n\n  const onChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    //setXAmount is the amount displayed in the input, should be string\n    const name = ev.target.name;\n    let value = ev.target.value;\n    if (ev.target.type === \"number\")\n      value =\n        ev.target.value === \"\"\n          ? ev.target.value\n          : toMaxDecimalsRound(ev.target.value, +ev.target.step).toString();\n\n    setFormValues((old) => {\n      return {\n        ...old,\n        [name]: value,\n      };\n    });\n  };\n\n  useEffect(() => {\n    handleInputChange(formValues);\n  }, [formValues, handleInputChange]);\n\n  return (\n    <div className=\"tab-pane is_active\">\n      <div className=\"tab-pane__content\">\n        <div className=\"box-operation__content\">\n          <div className=\"box-operation__operate operate\">\n            <div className=\"operate__form\">\n              <Notification>\n                <span>Add liquidity and earn fees on user swaps. <a href=\"https://github.com/corollari/tbtcswaps\">Learn more</a>.</span>\n              </Notification>\n              <div className=\"form-group\">\n                <Input\n                  value={formValues[\"lnBalance\"]}\n                  onChange={onChange}\n                  name=\"lnBalance\"\n                  label=\"LN Balance \"\n                  svgIcon={\n                    <svg className=\"icon icon-flash\">\n                      <use xlinkHref={`${ICONS}#icon-flash`}></use>\n                    </svg>\n                  }\n                  placeholder=\"0.0\"\n                  type=\"number\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <Input\n                  value={formValues[\"tbtcBalance\"]}\n                  onChange={onChange}\n                  name=\"tbtcBalance\"\n                  label=\"tBTC Balance \"\n                  svgIcon={\n                    <svg className=\"icon icon-man\">\n                      <use xlinkHref={`${ICONS}#icon-man`}></use>\n                    </svg>\n                  }\n                  placeholder=\"0.0\"\n                  type=\"number\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <Input\n                  value={formValues[\"linearFee\"]}\n                  onChange={onChange}\n                  name=\"linearFee\"\n                  label=\"Linear Fee \"\n                  placeholder=\"0.0\"\n                  type=\"number\"\n                  hint={\n                    <>\n                      <b>Linear Fee</b> is a percentual fee that will\n                      be charged on all swaps and grows with the amount swapped.\n                      <br />\n                      The total fee is calculated as:\n                      <br />\n                      totalFee = amount*linearFee + constantFee\n                    </>\n                  }\n                />\n              </div>\n              <div className=\"form-group\">\n                <Input\n                  value={formValues[\"constantFee\"]}\n                  onChange={onChange}\n                  name=\"constantFee\"\n                  label=\"Constant Fee \"\n                  placeholder=\"0.0\"\n                  type=\"number\"\n                  hint={\n                    <>\n                      <b>Constant Fee</b> is a fee denominated in satoshis\n                      that will be applied on all swaps by simply incrementing\n                      the cost.\n                      <br />\n                      The total fee is calculated as:\n                      <br />\n                      totalFee = amount*linearFee + constantFee\n                    </>\n                  }\n                />\n              </div>\n              <div className=\"form-group\">\n                <Input\n                  value={formValues[\"nodeAddress\"]}\n                  onChange={onChange}\n                  name=\"nodeAddress\"\n                  label=\"Public URL \"\n                  hint={\n                    <>\n                      <b>Public URL</b> should be the URL of your node\n                      which should have a publicly-exposed HTTP interface.\n                      <br />\n                      SSL should be forced on all connections for security reasons.\n                    </>\n                  }\n                />\n              </div>\n              {isConnected ?\n                <ActionButton\n                  text=\"Register\"\n                  className=\"operate__button\"\n                  onClick={() => {\n                    registerOperator({\n                      tBTCBalance: formValues.tbtcBalance,\n                      lnBalance: formValues.lnBalance,\n                      linearFee: formValues.linearFee,\n                      constantFee: formValues.constantFee,\n                      publicUrl: formValues.nodeAddress,\n                      exists:true\n                    })\n                  }}\n                />\n                :\n                <ActionButton text=\"Connect wallet\" className=\"operate__button\" type=\"secondary\" onClick={connectWallet} />\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OperatePane;\n","import React, { useState, useContext, useEffect } from \"react\";\n\nimport OperatePane from \"./OperatePane\";\n\nimport Web3Context from \"../../../../../Web3Context\";\n\nimport ln2tbtcABI from \"../../../../../contracts/LN2tBTC.json\";\nimport tbtcABI from \"../../../../../contracts/IERC20.json\";\nimport type { AbiItem } from \"web3-utils\";\nimport {\n  tbtcAddress,\n  ln2tbtcAddress,\n} from \"../../../../../contracts/deployedAddresses\";\n\nimport {\n  Operator,\n  Ln2tbtcContract,\n  ERC20Contract,\n} from \"../../../../../ethereum\";\n\nlet ln2tbtcContract: Ln2tbtcContract | null = null;\nlet tbtcContract: ERC20Contract | null = null;\n\nfunction convertToUint(amount:string, tokenDecimals:number){\n    let [int, decimals] = amount.split('.');\n    decimals = decimals ?? '';\n    int = int.replace(/^0+/, '');\n    decimals = decimals.padEnd(tokenDecimals, '0')\n    if(decimals.length > tokenDecimals){\n      throw new Error(\"Too many decimals were provided\")\n    }\n    return int + decimals;\n}\n\nasync function registerOperator(\n  operatorInfo: Operator,\n  operatorAddress: string,\n  ln2tbtcContract: Ln2tbtcContract,\n  tbtcContract: ERC20Contract\n) {\n  if (Number(operatorInfo.tBTCBalance) !== 0) {\n    await tbtcContract.methods\n      .approve(ln2tbtcAddress, operatorInfo.tBTCBalance)\n      .send({\n        from: operatorAddress,\n      });\n  }\n  await ln2tbtcContract.methods\n    .operatorRegister(\n      convertToUint(operatorInfo.tBTCBalance, 18),\n      convertToUint(operatorInfo.lnBalance, 8),\n      convertToUint(operatorInfo.linearFee, 8+2), // Transform to %\n      convertToUint(operatorInfo.constantFee, 8),\n      operatorInfo.publicUrl\n    )\n    .send({\n      from: operatorAddress,\n    });\n}\n\nconst Operate: React.FC = () => {\n  const [errorMsg, setErrorMsg] = useState<string>();\n  const [operatorInfo, setOperatorInfo] = React.useState<Operator | null>(null);\n  const { web3 } = useContext(Web3Context);\n\n  useEffect(() => {\n    // Avoid initializing contracts several times\n    if (web3 === null) return;\n    if (ln2tbtcContract === null) {\n      ln2tbtcContract = new web3.eth.Contract(\n        ln2tbtcABI.abi as AbiItem[],\n        ln2tbtcAddress\n      );\n    }\n    if (tbtcContract === null) {\n      tbtcContract = new web3.eth.Contract(\n        tbtcABI.abi as AbiItem[],\n        tbtcAddress\n      );\n    }\n  }, [web3]);\n\n  const [userAddress, setUserAddress] = useState<string>();\n\n  useEffect(() => {\n    setUserAddress(\n      web3 === null ? undefined : (web3.currentProvider as any).selectedAddress\n    );\n  }, [web3]);\n\n  /*\n  useEffect(() => {\n    if (operatorInfo === null && ln2tbtcContract !== null && userAddress) {\n      ln2tbtcContract.methods\n        .operators(userAddress)\n        .call()\n        .then(setOperatorInfo)\n        .catch((err) => setErrorMsg(err.message));\n    }\n  }, [userAddress, operatorInfo]);\n  */\n\n  if(!!errorMsg){\n    return <span>{errorMsg}</span>\n  } else {\n    return <OperatePane \n    handleInputChange={(form) => {}}\n    isConnected={web3!==null}\n    registerOperator={\n      (op:Operator)=>registerOperator(op, userAddress!, ln2tbtcContract!, tbtcContract!)\n    }/>\n  }\n};\n\nexport default Operate;\n","import React from \"react\";\n\nimport { SwapPane, OperatePane } from \"./Panes\";\n\ninterface TabContentProps {\n  activeTabId: string;\n}\n\nconst TabContent: React.FC<TabContentProps> = ({ activeTabId }) => {\n  return (\n    <div className=\"tab-content\">\n      {(activeTabId === \"swap\" && <SwapPane />) ||\n        (activeTabId === \"operate\" && <OperatePane />) || (\n          <div>Contact us.</div>\n        )}\n    </div>\n  );\n};\n\nexport default TabContent;\n","import React, { useState } from \"react\";\nimport TabHeader from \"./TabHeader\";\nimport TabContent from \"./TabContent\";\n\ninterface WidgetProps {}\n\nconst Widget: React.FC<WidgetProps> = () => {\n  const defaultTab = \"swap\";\n  const [activeTabId, setActiveTabId] = useState(defaultTab);\n\n  return (\n    <div className=\"box-operation\">\n      <div className=\"box-operation__tabs tabs\">\n        <TabHeader defaultTab={defaultTab} onTabClick={setActiveTabId} />\n        <TabContent activeTabId={activeTabId} />\n      </div>\n    </div>\n  );\n};\n\nexport default Widget;\n","import React from \"react\";\nimport Widget from \"../Widget\";\n\ninterface BodyProps {}\n\nconst Body: React.FC<BodyProps> = () => {\n  return (\n    <div className=\"wrapper-content\">\n      <div className=\"container\">\n        <div className=\"content\">\n          <div className=\"heading\">\n            <div className=\"heading__title\">\n              <h1>tBTC Swap Engine</h1>\n            </div>\n            <div className=\"heading__text\">\n              Trustless tBTC / Lightning Network swaps\n            </div>\n          </div>\n          <Widget />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Body;\n","import React from \"react\";\nimport Footer from \"./views/Footer\";\nimport Header from \"./views/Header\";\nimport Body from \"./views/Body\";\nimport \"./css/App.css\";\nimport { Web3Provider } from \"./Web3Context\";\n\nfunction App() {\n  return (\n    <div className=\"wrapper\" /* className={styles.wrapper} */>\n      <Web3Provider>\n        <Header />\n        <Body />\n        <Footer />\n      </Web3Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}